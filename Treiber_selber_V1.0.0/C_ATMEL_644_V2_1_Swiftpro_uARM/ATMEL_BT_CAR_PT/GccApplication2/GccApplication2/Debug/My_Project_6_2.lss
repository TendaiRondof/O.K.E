
My_Project_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00000bf4  00000c88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bf4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005a  00800152  00800152  00000cda  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cda  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001075  00000000  00000000  00000e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f1  00000000  00000000  00001ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000caa  00000000  00000000  000028c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000404  00000000  00000000  0000356c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000766  00000000  00000000  00003970  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000820  00000000  00000000  000040d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000048f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__vector_16>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__vector_20>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e4 ef       	ldi	r30, 0xF4	; 244
  90:	fb e0       	ldi	r31, 0x0B	; 11
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 35       	cpi	r26, 0x52	; 82
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a2 e5       	ldi	r26, 0x52	; 82
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ac 3a       	cpi	r26, 0xAC	; 172
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 2f 02 	call	0x45e	; 0x45e <main>
  b2:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <get_DIP_Switch>:
		//Die Schleife läuft durch bis strtok() den NULL-Zeiger zurückliefert.
	}
	k=0;
	uart_str_complete = 0;
	//wait_1ms(Delay_LCD);	
}
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	00 d0       	rcall	.+0      	; 0xc0 <get_DIP_Switch+0x6>
  c0:	1f 92       	push	r1
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	19 82       	std	Y+1, r1	; 0x01
  c8:	82 e2       	ldi	r24, 0x22	; 34
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	22 e2       	ldi	r18, 0x22	; 34
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	f9 01       	movw	r30, r18
  d2:	20 81       	ld	r18, Z
  d4:	20 62       	ori	r18, 0x20	; 32
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
  da:	82 e2       	ldi	r24, 0x22	; 34
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	22 e2       	ldi	r18, 0x22	; 34
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	f9 01       	movw	r30, r18
  e4:	20 81       	ld	r18, Z
  e6:	2f 7d       	andi	r18, 0xDF	; 223
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
  ec:	82 e2       	ldi	r24, 0x22	; 34
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	22 e2       	ldi	r18, 0x22	; 34
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	f9 01       	movw	r30, r18
  f6:	20 81       	ld	r18, Z
  f8:	20 62       	ori	r18, 0x20	; 32
  fa:	fc 01       	movw	r30, r24
  fc:	20 83       	st	Z, r18
  fe:	87 e0       	ldi	r24, 0x07	; 7
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	9b 83       	std	Y+3, r25	; 0x03
 104:	8a 83       	std	Y+2, r24	; 0x02
 106:	30 c0       	rjmp	.+96     	; 0x168 <get_DIP_Switch+0xae>
 108:	80 e2       	ldi	r24, 0x20	; 32
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	fc 01       	movw	r30, r24
 10e:	80 81       	ld	r24, Z
 110:	88 2f       	mov	r24, r24
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	80 78       	andi	r24, 0x80	; 128
 116:	99 27       	eor	r25, r25
 118:	47 e0       	ldi	r20, 0x07	; 7
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	2a 81       	ldd	r18, Y+2	; 0x02
 11e:	3b 81       	ldd	r19, Y+3	; 0x03
 120:	ba 01       	movw	r22, r20
 122:	62 1b       	sub	r22, r18
 124:	73 0b       	sbc	r23, r19
 126:	9b 01       	movw	r18, r22
 128:	02 c0       	rjmp	.+4      	; 0x12e <get_DIP_Switch+0x74>
 12a:	95 95       	asr	r25
 12c:	87 95       	ror	r24
 12e:	2a 95       	dec	r18
 130:	e2 f7       	brpl	.-8      	; 0x12a <get_DIP_Switch+0x70>
 132:	98 2f       	mov	r25, r24
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	89 2b       	or	r24, r25
 138:	89 83       	std	Y+1, r24	; 0x01
 13a:	82 e2       	ldi	r24, 0x22	; 34
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	22 e2       	ldi	r18, 0x22	; 34
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	f9 01       	movw	r30, r18
 144:	20 81       	ld	r18, Z
 146:	2f 7b       	andi	r18, 0xBF	; 191
 148:	fc 01       	movw	r30, r24
 14a:	20 83       	st	Z, r18
 14c:	82 e2       	ldi	r24, 0x22	; 34
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	22 e2       	ldi	r18, 0x22	; 34
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	f9 01       	movw	r30, r18
 156:	20 81       	ld	r18, Z
 158:	20 64       	ori	r18, 0x40	; 64
 15a:	fc 01       	movw	r30, r24
 15c:	20 83       	st	Z, r18
 15e:	8a 81       	ldd	r24, Y+2	; 0x02
 160:	9b 81       	ldd	r25, Y+3	; 0x03
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	9b 83       	std	Y+3, r25	; 0x03
 166:	8a 83       	std	Y+2, r24	; 0x02
 168:	8a 81       	ldd	r24, Y+2	; 0x02
 16a:	9b 81       	ldd	r25, Y+3	; 0x03
 16c:	99 23       	and	r25, r25
 16e:	64 f6       	brge	.-104    	; 0x108 <get_DIP_Switch+0x4e>
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	0f 90       	pop	r0
 174:	0f 90       	pop	r0
 176:	0f 90       	pop	r0
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <get_LCD_Taster>:
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	1f 92       	push	r1
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
 188:	85 e2       	ldi	r24, 0x25	; 37
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	25 e2       	ldi	r18, 0x25	; 37
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	f9 01       	movw	r30, r18
 192:	20 81       	ld	r18, Z
 194:	20 7f       	andi	r18, 0xF0	; 240
 196:	fc 01       	movw	r30, r24
 198:	20 83       	st	Z, r18
 19a:	84 e2       	ldi	r24, 0x24	; 36
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	20 ef       	ldi	r18, 0xF0	; 240
 1a0:	fc 01       	movw	r30, r24
 1a2:	20 83       	st	Z, r18
	...
 1b8:	83 e2       	ldi	r24, 0x23	; 35
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	fc 01       	movw	r30, r24
 1be:	80 81       	ld	r24, Z
 1c0:	8f 70       	andi	r24, 0x0F	; 15
 1c2:	89 83       	std	Y+1, r24	; 0x01
 1c4:	84 e2       	ldi	r24, 0x24	; 36
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	2f ef       	ldi	r18, 0xFF	; 255
 1ca:	fc 01       	movw	r30, r24
 1cc:	20 83       	st	Z, r18
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	0f 90       	pop	r0
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <init_ADC>:
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	cd b7       	in	r28, 0x3d	; 61
 1de:	de b7       	in	r29, 0x3e	; 62
 1e0:	8a e7       	ldi	r24, 0x7A	; 122
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	2a e7       	ldi	r18, 0x7A	; 122
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	f9 01       	movw	r30, r18
 1ea:	20 81       	ld	r18, Z
 1ec:	20 68       	ori	r18, 0x80	; 128
 1ee:	fc 01       	movw	r30, r24
 1f0:	20 83       	st	Z, r18
 1f2:	8c e7       	ldi	r24, 0x7C	; 124
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	2c e7       	ldi	r18, 0x7C	; 124
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	f9 01       	movw	r30, r18
 1fc:	20 81       	ld	r18, Z
 1fe:	20 64       	ori	r18, 0x40	; 64
 200:	fc 01       	movw	r30, r24
 202:	20 83       	st	Z, r18
 204:	8a e7       	ldi	r24, 0x7A	; 122
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	2a e7       	ldi	r18, 0x7A	; 122
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	f9 01       	movw	r30, r18
 20e:	20 81       	ld	r18, Z
 210:	27 60       	ori	r18, 0x07	; 7
 212:	fc 01       	movw	r30, r24
 214:	20 83       	st	Z, r18
 216:	00 00       	nop
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <init_UART0>:
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
 226:	84 ec       	ldi	r24, 0xC4	; 196
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	20 e1       	ldi	r18, 0x10	; 16
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	fc 01       	movw	r30, r24
 230:	31 83       	std	Z+1, r19	; 0x01
 232:	20 83       	st	Z, r18
 234:	80 ec       	ldi	r24, 0xC0	; 192
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	20 ec       	ldi	r18, 0xC0	; 192
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	f9 01       	movw	r30, r18
 23e:	20 81       	ld	r18, Z
 240:	22 60       	ori	r18, 0x02	; 2
 242:	fc 01       	movw	r30, r24
 244:	20 83       	st	Z, r18
 246:	81 ec       	ldi	r24, 0xC1	; 193
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	21 ec       	ldi	r18, 0xC1	; 193
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	f9 01       	movw	r30, r18
 250:	20 81       	ld	r18, Z
 252:	28 69       	ori	r18, 0x98	; 152
 254:	fc 01       	movw	r30, r24
 256:	20 83       	st	Z, r18
 258:	00 00       	nop
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <send_Byte>:
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	1f 92       	push	r1
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62
 26a:	89 83       	std	Y+1, r24	; 0x01
 26c:	00 00       	nop
 26e:	80 ec       	ldi	r24, 0xC0	; 192
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	fc 01       	movw	r30, r24
 274:	80 81       	ld	r24, Z
 276:	88 2f       	mov	r24, r24
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	80 72       	andi	r24, 0x20	; 32
 27c:	99 27       	eor	r25, r25
 27e:	89 2b       	or	r24, r25
 280:	b1 f3       	breq	.-20     	; 0x26e <send_Byte+0xe>
 282:	86 ec       	ldi	r24, 0xC6	; 198
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	29 81       	ldd	r18, Y+1	; 0x01
 288:	fc 01       	movw	r30, r24
 28a:	20 83       	st	Z, r18
 28c:	00 00       	nop
 28e:	0f 90       	pop	r0
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <XYZ_to_Display>:
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	00 d0       	rcall	.+0      	; 0x29c <XYZ_to_Display+0x6>
 29c:	cd b7       	in	r28, 0x3d	; 61
 29e:	de b7       	in	r29, 0x3e	; 62
 2a0:	9a 83       	std	Y+2, r25	; 0x02
 2a2:	89 83       	std	Y+1, r24	; 0x01
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <uart_str_complete>
 2aa:	0e 94 29 05 	call	0xa52	; 0xa52 <clear_lcd>
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	71 e0       	ldi	r23, 0x01	; 1
 2b2:	88 e5       	ldi	r24, 0x58	; 88
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	0e 94 cc 05 	call	0xb98	; 0xb98 <strtok>
 2ba:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <ptr_Abschnitt+0x1>
 2be:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <ptr_Abschnitt>
 2c2:	1a c0       	rjmp	.+52     	; 0x2f8 <XYZ_to_Display+0x62>
 2c4:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <ptr_Abschnitt>
 2c8:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <ptr_Abschnitt+0x1>
 2cc:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <k>
 2d0:	ac 01       	movw	r20, r24
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	82 2f       	mov	r24, r18
 2d6:	0e 94 cd 03 	call	0x79a	; 0x79a <write_text_ram>
 2da:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <k>
 2de:	8f 5f       	subi	r24, 0xFF	; 255
 2e0:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <k>
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	71 e0       	ldi	r23, 0x01	; 1
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 cc 05 	call	0xb98	; 0xb98 <strtok>
 2f0:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <ptr_Abschnitt+0x1>
 2f4:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <ptr_Abschnitt>
 2f8:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <ptr_Abschnitt>
 2fc:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <ptr_Abschnitt+0x1>
 300:	89 2b       	or	r24, r25
 302:	01 f7       	brne	.-64     	; 0x2c4 <XYZ_to_Display+0x2e>
 304:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <k>
 308:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <uart_str_complete>
 30c:	89 81       	ldd	r24, Y+1	; 0x01
 30e:	9a 81       	ldd	r25, Y+2	; 0x02
 310:	cc 01       	movw	r24, r24
 312:	a0 e0       	ldi	r26, 0x00	; 0
 314:	b0 e0       	ldi	r27, 0x00	; 0
 316:	bc 01       	movw	r22, r24
 318:	cd 01       	movw	r24, r26
 31a:	0e 94 23 03 	call	0x646	; 0x646 <wait_1ms>
 31e:	00 00       	nop
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	08 95       	ret

0000032a <to_uARM>:
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	00 d0       	rcall	.+0      	; 0x330 <to_uARM+0x6>
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
 334:	9a 83       	std	Y+2, r25	; 0x02
 336:	89 83       	std	Y+1, r24	; 0x01
 338:	0b c0       	rjmp	.+22     	; 0x350 <to_uARM+0x26>
 33a:	89 81       	ldd	r24, Y+1	; 0x01
 33c:	9a 81       	ldd	r25, Y+2	; 0x02
 33e:	fc 01       	movw	r30, r24
 340:	80 81       	ld	r24, Z
 342:	0e 94 30 01 	call	0x260	; 0x260 <send_Byte>
 346:	89 81       	ldd	r24, Y+1	; 0x01
 348:	9a 81       	ldd	r25, Y+2	; 0x02
 34a:	01 96       	adiw	r24, 0x01	; 1
 34c:	9a 83       	std	Y+2, r25	; 0x02
 34e:	89 83       	std	Y+1, r24	; 0x01
 350:	89 81       	ldd	r24, Y+1	; 0x01
 352:	9a 81       	ldd	r25, Y+2	; 0x02
 354:	fc 01       	movw	r30, r24
 356:	80 81       	ld	r24, Z
 358:	88 23       	and	r24, r24
 35a:	79 f7       	brne	.-34     	; 0x33a <to_uARM+0x10>
 35c:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <uart_str_complete>
 360:	00 00       	nop
 362:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <uart_str_complete>
 366:	88 23       	and	r24, r24
 368:	e1 f3       	breq	.-8      	; 0x362 <to_uARM+0x38>
 36a:	00 00       	nop
 36c:	0f 90       	pop	r0
 36e:	0f 90       	pop	r0
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	08 95       	ret

00000376 <send_to_uArm>:
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	00 d0       	rcall	.+0      	; 0x37c <send_to_uArm+0x6>
 37c:	cd b7       	in	r28, 0x3d	; 61
 37e:	de b7       	in	r29, 0x3e	; 62
 380:	9a 83       	std	Y+2, r25	; 0x02
 382:	89 83       	std	Y+1, r24	; 0x01
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	9a 81       	ldd	r25, Y+2	; 0x02
 388:	0e 94 95 01 	call	0x32a	; 0x32a <to_uARM>
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	91 e0       	ldi	r25, 0x01	; 1
 390:	0e 94 95 01 	call	0x32a	; 0x32a <to_uARM>
 394:	04 c0       	rjmp	.+8      	; 0x39e <send_to_uArm+0x28>
 396:	82 e0       	ldi	r24, 0x02	; 2
 398:	91 e0       	ldi	r25, 0x01	; 1
 39a:	0e 94 95 01 	call	0x32a	; 0x32a <to_uARM>
 39e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <uart_string+0x4>
 3a2:	81 33       	cpi	r24, 0x31	; 49
 3a4:	c1 f3       	breq	.-16     	; 0x396 <send_to_uArm+0x20>
 3a6:	89 e0       	ldi	r24, 0x09	; 9
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	0e 94 95 01 	call	0x32a	; 0x32a <to_uARM>
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 4b 01 	call	0x296	; 0x296 <XYZ_to_Display>
 3b6:	00 00       	nop
 3b8:	0f 90       	pop	r0
 3ba:	0f 90       	pop	r0
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	08 95       	ret

000003c2 <__vector_20>:

ISR (USART0_RX_vect) // UART0 Empfangsinterrupt
{
 3c2:	1f 92       	push	r1
 3c4:	0f 92       	push	r0
 3c6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3ca:	0f 92       	push	r0
 3cc:	11 24       	eor	r1, r1
 3ce:	2f 93       	push	r18
 3d0:	8f 93       	push	r24
 3d2:	9f 93       	push	r25
 3d4:	ef 93       	push	r30
 3d6:	ff 93       	push	r31
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
 3dc:	1f 92       	push	r1
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62
  unsigned char nextChar;

  // Daten aus dem Puffer lesen
  nextChar = UDR0;
 3e2:	86 ec       	ldi	r24, 0xC6	; 198
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	fc 01       	movw	r30, r24
 3e8:	80 81       	ld	r24, Z
 3ea:	89 83       	std	Y+1, r24	; 0x01
  if( uart_str_complete == 0 )
 3ec:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <uart_str_complete>
 3f0:	88 23       	and	r24, r24
 3f2:	31 f5       	brne	.+76     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
  {	// Daten werden erst in uart_string geschrieben, wenn nicht String-Ende/max Zeichenlänge erreicht ist/string gerade verarbeitet wird
    if( nextChar != '\n' && nextChar != '\r' && uart_str_count < UART_MAXSTRLEN )
 3f4:	89 81       	ldd	r24, Y+1	; 0x01
 3f6:	8a 30       	cpi	r24, 0x0A	; 10
 3f8:	b1 f0       	breq	.+44     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3fa:	89 81       	ldd	r24, Y+1	; 0x01
 3fc:	8d 30       	cpi	r24, 0x0D	; 13
 3fe:	99 f0       	breq	.+38     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 400:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <uart_str_count>
 404:	82 33       	cpi	r24, 0x32	; 50
 406:	78 f4       	brcc	.+30     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	{
      uart_string[uart_str_count] = nextChar;
 408:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <uart_str_count>
 40c:	88 2f       	mov	r24, r24
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	88 5a       	subi	r24, 0xA8	; 168
 412:	9e 4f       	sbci	r25, 0xFE	; 254
 414:	29 81       	ldd	r18, Y+1	; 0x01
 416:	fc 01       	movw	r30, r24
 418:	20 83       	st	Z, r18
      uart_str_count++;
 41a:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <uart_str_count>
 41e:	8f 5f       	subi	r24, 0xFF	; 255
 420:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <uart_str_count>
      uart_string[uart_str_count] = '\0';
      uart_str_count = 0;
      uart_str_complete = 1;
    }
  }
}
 424:	0d c0       	rjmp	.+26     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
      uart_string[uart_str_count] = nextChar;
      uart_str_count++;
    }
    else 
	{
      uart_string[uart_str_count] = '\0';
 426:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <uart_str_count>
 42a:	88 2f       	mov	r24, r24
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	88 5a       	subi	r24, 0xA8	; 168
 430:	9e 4f       	sbci	r25, 0xFE	; 254
 432:	fc 01       	movw	r30, r24
 434:	10 82       	st	Z, r1
      uart_str_count = 0;
 436:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <uart_str_count>
      uart_str_complete = 1;
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <uart_str_complete>
    }
  }
}
 440:	00 00       	nop
 442:	0f 90       	pop	r0
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	ff 91       	pop	r31
 44a:	ef 91       	pop	r30
 44c:	9f 91       	pop	r25
 44e:	8f 91       	pop	r24
 450:	2f 91       	pop	r18
 452:	0f 90       	pop	r0
 454:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 458:	0f 90       	pop	r0
 45a:	1f 90       	pop	r1
 45c:	18 95       	reti

0000045e <main>:
// ==============================================================================================================
// Hier beginnt das Hauptprogramm "main"
// --------------------------------------------------------------------------------------------------------------

int main (void)
{
 45e:	cf 92       	push	r12
 460:	ef 92       	push	r14
 462:	0f 93       	push	r16
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	00 d0       	rcall	.+0      	; 0x46a <main+0xc>
 46a:	cd b7       	in	r28, 0x3d	; 61
 46c:	de b7       	in	r29, 0x3e	; 62
	init_BT_CAR_V2_0();			// Das Board wird hier initialisiert
 46e:	0e 94 8c 05 	call	0xb18	; 0xb18 <init_BT_CAR_V2_0>
	//write_text(0,4, PSTR("READY TO GO!"));	
	wait_1ms(1000);	
 472:	68 ee       	ldi	r22, 0xE8	; 232
 474:	73 e0       	ldi	r23, 0x03	; 3
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 23 03 	call	0x646	; 0x646 <wait_1ms>
	clear_lcd();				// LCD clear
 47e:	0e 94 29 05 	call	0xa52	; 0xa52 <clear_lcd>
	init_ADC();
 482:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <init_ADC>
	init_UART0();
 486:	0e 94 0f 01 	call	0x21e	; 0x21e <init_UART0>
	send_to_uArm("G0 M202 N0\n");
 48a:	85 e1       	ldi	r24, 0x15	; 21
 48c:	91 e0       	ldi	r25, 0x01	; 1
 48e:	0e 94 bb 01 	call	0x376	; 0x376 <send_to_uArm>
	unsigned char version;
unsigned char taster;

clear_lcd();
 492:	0e 94 29 05 	call	0xa52	; 0xa52 <clear_lcd>
send_to_uArm("P2201\n");
 496:	81 e2       	ldi	r24, 0x21	; 33
 498:	91 e0       	ldi	r25, 0x01	; 1
 49a:	0e 94 bb 01 	call	0x376	; 0x376 <send_to_uArm>
send_to_uArm("G2202 N0 V45\n");
 49e:	88 e2       	ldi	r24, 0x28	; 40
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	0e 94 bb 01 	call	0x376	; 0x376 <send_to_uArm>
send_to_uArm("G2202 N1 V45\n");
 4a6:	86 e3       	ldi	r24, 0x36	; 54
 4a8:	91 e0       	ldi	r25, 0x01	; 1
 4aa:	0e 94 bb 01 	call	0x376	; 0x376 <send_to_uArm>
write_zahl(0,7,version,2,2,2);
 4ae:	89 81       	ldd	r24, Y+1	; 0x01
 4b0:	88 2f       	mov	r24, r24
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	a0 e0       	ldi	r26, 0x00	; 0
 4b6:	b0 e0       	ldi	r27, 0x00	; 0
 4b8:	68 94       	set
 4ba:	cc 24       	eor	r12, r12
 4bc:	c1 f8       	bld	r12, 1
 4be:	68 94       	set
 4c0:	ee 24       	eor	r14, r14
 4c2:	e1 f8       	bld	r14, 1
 4c4:	02 e0       	ldi	r16, 0x02	; 2
 4c6:	9c 01       	movw	r18, r24
 4c8:	ad 01       	movw	r20, r26
 4ca:	67 e0       	ldi	r22, 0x07	; 7
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <write_zahl>
	while(1)
	{
		taster = get_LCD_Taster();
 4d2:	0e 94 bf 00 	call	0x17e	; 0x17e <get_LCD_Taster>
 4d6:	8a 83       	std	Y+2, r24	; 0x02
		DIP_Switch=get_DIP_Switch();
 4d8:	0e 94 5d 00 	call	0xba	; 0xba <get_DIP_Switch>
 4dc:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <DIP_Switch>
		
		send_to_uArm("G2202 N0 V90\n");
 4e0:	84 e4       	ldi	r24, 0x44	; 68
 4e2:	91 e0       	ldi	r25, 0x01	; 1
 4e4:	0e 94 bb 01 	call	0x376	; 0x376 <send_to_uArm>
		if (DIP_Switch>0)
		{
		}
		
		
	} //end while(1)
 4e8:	f4 cf       	rjmp	.-24     	; 0x4d2 <main+0x74>

000004ea <init_Timer0_1ms_int>:
	wert = pgm_read_byte(&str_ptr[str_p++]);
	while(wert != 0)
	{	write_lcd_f ('D',wert);																				// Daten in obige Adresse schreiben
		wert = pgm_read_byte(&str_ptr[str_p++]);
	}
}
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	cd b7       	in	r28, 0x3d	; 61
 4f0:	de b7       	in	r29, 0x3e	; 62
 4f2:	84 e4       	ldi	r24, 0x44	; 68
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	24 e4       	ldi	r18, 0x44	; 68
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	f9 01       	movw	r30, r18
 4fc:	20 81       	ld	r18, Z
 4fe:	22 60       	ori	r18, 0x02	; 2
 500:	fc 01       	movw	r30, r24
 502:	20 83       	st	Z, r18
 504:	85 e4       	ldi	r24, 0x45	; 69
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	25 e4       	ldi	r18, 0x45	; 69
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	f9 01       	movw	r30, r18
 50e:	20 81       	ld	r18, Z
 510:	23 60       	ori	r18, 0x03	; 3
 512:	fc 01       	movw	r30, r24
 514:	20 83       	st	Z, r18
 516:	87 e4       	ldi	r24, 0x47	; 71
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	29 ef       	ldi	r18, 0xF9	; 249
 51c:	fc 01       	movw	r30, r24
 51e:	20 83       	st	Z, r18
 520:	8e e6       	ldi	r24, 0x6E	; 110
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	2e e6       	ldi	r18, 0x6E	; 110
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	f9 01       	movw	r30, r18
 52a:	20 81       	ld	r18, Z
 52c:	22 60       	ori	r18, 0x02	; 2
 52e:	fc 01       	movw	r30, r24
 530:	20 83       	st	Z, r18
 532:	00 00       	nop
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	08 95       	ret

0000053a <__vector_16>:
 53a:	1f 92       	push	r1
 53c:	0f 92       	push	r0
 53e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 542:	0f 92       	push	r0
 544:	11 24       	eor	r1, r1
 546:	2f 93       	push	r18
 548:	3f 93       	push	r19
 54a:	4f 93       	push	r20
 54c:	5f 93       	push	r21
 54e:	6f 93       	push	r22
 550:	7f 93       	push	r23
 552:	8f 93       	push	r24
 554:	9f 93       	push	r25
 556:	af 93       	push	r26
 558:	bf 93       	push	r27
 55a:	ef 93       	push	r30
 55c:	ff 93       	push	r31
 55e:	cf 93       	push	r28
 560:	df 93       	push	r29
 562:	cd b7       	in	r28, 0x3d	; 61
 564:	de b7       	in	r29, 0x3e	; 62
 566:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <tick_1ms>
 56a:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <tick_1ms+0x1>
 56e:	a0 91 91 01 	lds	r26, 0x0191	; 0x800191 <tick_1ms+0x2>
 572:	b0 91 92 01 	lds	r27, 0x0192	; 0x800192 <tick_1ms+0x3>
 576:	01 96       	adiw	r24, 0x01	; 1
 578:	a1 1d       	adc	r26, r1
 57a:	b1 1d       	adc	r27, r1
 57c:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <tick_1ms>
 580:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <tick_1ms+0x1>
 584:	a0 93 91 01 	sts	0x0191, r26	; 0x800191 <tick_1ms+0x2>
 588:	b0 93 92 01 	sts	0x0192, r27	; 0x800192 <tick_1ms+0x3>
 58c:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <tick_1ms>
 590:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <tick_1ms+0x1>
 594:	a0 91 91 01 	lds	r26, 0x0191	; 0x800191 <tick_1ms+0x2>
 598:	b0 91 92 01 	lds	r27, 0x0192	; 0x800192 <tick_1ms+0x3>
 59c:	28 ee       	ldi	r18, 0xE8	; 232
 59e:	33 e0       	ldi	r19, 0x03	; 3
 5a0:	40 e0       	ldi	r20, 0x00	; 0
 5a2:	50 e0       	ldi	r21, 0x00	; 0
 5a4:	bc 01       	movw	r22, r24
 5a6:	cd 01       	movw	r24, r26
 5a8:	0e 94 aa 05 	call	0xb54	; 0xb54 <__udivmodsi4>
 5ac:	dc 01       	movw	r26, r24
 5ae:	cb 01       	movw	r24, r22
 5b0:	89 2b       	or	r24, r25
 5b2:	8a 2b       	or	r24, r26
 5b4:	8b 2b       	or	r24, r27
 5b6:	99 f4       	brne	.+38     	; 0x5de <__vector_16+0xa4>
 5b8:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <tick_1s>
 5bc:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <tick_1s+0x1>
 5c0:	a0 91 95 01 	lds	r26, 0x0195	; 0x800195 <tick_1s+0x2>
 5c4:	b0 91 96 01 	lds	r27, 0x0196	; 0x800196 <tick_1s+0x3>
 5c8:	01 96       	adiw	r24, 0x01	; 1
 5ca:	a1 1d       	adc	r26, r1
 5cc:	b1 1d       	adc	r27, r1
 5ce:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <tick_1s>
 5d2:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <tick_1s+0x1>
 5d6:	a0 93 95 01 	sts	0x0195, r26	; 0x800195 <tick_1s+0x2>
 5da:	b0 93 96 01 	sts	0x0196, r27	; 0x800196 <tick_1s+0x3>
 5de:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <tick_1ms_cnt>
 5e2:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <tick_1ms_cnt+0x1>
 5e6:	a0 91 8d 01 	lds	r26, 0x018D	; 0x80018d <tick_1ms_cnt+0x2>
 5ea:	b0 91 8e 01 	lds	r27, 0x018E	; 0x80018e <tick_1ms_cnt+0x3>
 5ee:	89 2b       	or	r24, r25
 5f0:	8a 2b       	or	r24, r26
 5f2:	8b 2b       	or	r24, r27
 5f4:	99 f0       	breq	.+38     	; 0x61c <__vector_16+0xe2>
 5f6:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <tick_1ms_cnt>
 5fa:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <tick_1ms_cnt+0x1>
 5fe:	a0 91 8d 01 	lds	r26, 0x018D	; 0x80018d <tick_1ms_cnt+0x2>
 602:	b0 91 8e 01 	lds	r27, 0x018E	; 0x80018e <tick_1ms_cnt+0x3>
 606:	01 97       	sbiw	r24, 0x01	; 1
 608:	a1 09       	sbc	r26, r1
 60a:	b1 09       	sbc	r27, r1
 60c:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <tick_1ms_cnt>
 610:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <tick_1ms_cnt+0x1>
 614:	a0 93 8d 01 	sts	0x018D, r26	; 0x80018d <tick_1ms_cnt+0x2>
 618:	b0 93 8e 01 	sts	0x018E, r27	; 0x80018e <tick_1ms_cnt+0x3>
 61c:	00 00       	nop
 61e:	df 91       	pop	r29
 620:	cf 91       	pop	r28
 622:	ff 91       	pop	r31
 624:	ef 91       	pop	r30
 626:	bf 91       	pop	r27
 628:	af 91       	pop	r26
 62a:	9f 91       	pop	r25
 62c:	8f 91       	pop	r24
 62e:	7f 91       	pop	r23
 630:	6f 91       	pop	r22
 632:	5f 91       	pop	r21
 634:	4f 91       	pop	r20
 636:	3f 91       	pop	r19
 638:	2f 91       	pop	r18
 63a:	0f 90       	pop	r0
 63c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 640:	0f 90       	pop	r0
 642:	1f 90       	pop	r1
 644:	18 95       	reti

00000646 <wait_1ms>:
 646:	cf 93       	push	r28
 648:	df 93       	push	r29
 64a:	00 d0       	rcall	.+0      	; 0x64c <wait_1ms+0x6>
 64c:	00 d0       	rcall	.+0      	; 0x64e <wait_1ms+0x8>
 64e:	cd b7       	in	r28, 0x3d	; 61
 650:	de b7       	in	r29, 0x3e	; 62
 652:	69 83       	std	Y+1, r22	; 0x01
 654:	7a 83       	std	Y+2, r23	; 0x02
 656:	8b 83       	std	Y+3, r24	; 0x03
 658:	9c 83       	std	Y+4, r25	; 0x04
 65a:	89 81       	ldd	r24, Y+1	; 0x01
 65c:	9a 81       	ldd	r25, Y+2	; 0x02
 65e:	ab 81       	ldd	r26, Y+3	; 0x03
 660:	bc 81       	ldd	r27, Y+4	; 0x04
 662:	89 2b       	or	r24, r25
 664:	8a 2b       	or	r24, r26
 666:	8b 2b       	or	r24, r27
 668:	69 f0       	breq	.+26     	; 0x684 <wait_1ms+0x3e>
 66a:	89 81       	ldd	r24, Y+1	; 0x01
 66c:	9a 81       	ldd	r25, Y+2	; 0x02
 66e:	ab 81       	ldd	r26, Y+3	; 0x03
 670:	bc 81       	ldd	r27, Y+4	; 0x04
 672:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <tick_1ms_cnt>
 676:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <tick_1ms_cnt+0x1>
 67a:	a0 93 8d 01 	sts	0x018D, r26	; 0x80018d <tick_1ms_cnt+0x2>
 67e:	b0 93 8e 01 	sts	0x018E, r27	; 0x80018e <tick_1ms_cnt+0x3>
 682:	0c c0       	rjmp	.+24     	; 0x69c <wait_1ms+0x56>
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	a0 e0       	ldi	r26, 0x00	; 0
 68a:	b0 e0       	ldi	r27, 0x00	; 0
 68c:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <tick_1ms_cnt>
 690:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <tick_1ms_cnt+0x1>
 694:	a0 93 8d 01 	sts	0x018D, r26	; 0x80018d <tick_1ms_cnt+0x2>
 698:	b0 93 8e 01 	sts	0x018E, r27	; 0x80018e <tick_1ms_cnt+0x3>
 69c:	00 00       	nop
 69e:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <tick_1ms_cnt>
 6a2:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <tick_1ms_cnt+0x1>
 6a6:	a0 91 8d 01 	lds	r26, 0x018D	; 0x80018d <tick_1ms_cnt+0x2>
 6aa:	b0 91 8e 01 	lds	r27, 0x018E	; 0x80018e <tick_1ms_cnt+0x3>
 6ae:	89 2b       	or	r24, r25
 6b0:	8a 2b       	or	r24, r26
 6b2:	8b 2b       	or	r24, r27
 6b4:	a1 f7       	brne	.-24     	; 0x69e <wait_1ms+0x58>
 6b6:	00 00       	nop
 6b8:	0f 90       	pop	r0
 6ba:	0f 90       	pop	r0
 6bc:	0f 90       	pop	r0
 6be:	0f 90       	pop	r0
 6c0:	df 91       	pop	r29
 6c2:	cf 91       	pop	r28
 6c4:	08 95       	ret

000006c6 <delay_nop>:
 6c6:	cf 93       	push	r28
 6c8:	df 93       	push	r29
 6ca:	00 d0       	rcall	.+0      	; 0x6cc <delay_nop+0x6>
 6cc:	cd b7       	in	r28, 0x3d	; 61
 6ce:	de b7       	in	r29, 0x3e	; 62
 6d0:	8a 83       	std	Y+2, r24	; 0x02
 6d2:	19 82       	std	Y+1, r1	; 0x01
 6d4:	04 c0       	rjmp	.+8      	; 0x6de <delay_nop+0x18>
 6d6:	00 00       	nop
 6d8:	89 81       	ldd	r24, Y+1	; 0x01
 6da:	8f 5f       	subi	r24, 0xFF	; 255
 6dc:	89 83       	std	Y+1, r24	; 0x01
 6de:	99 81       	ldd	r25, Y+1	; 0x01
 6e0:	8a 81       	ldd	r24, Y+2	; 0x02
 6e2:	98 17       	cp	r25, r24
 6e4:	c0 f3       	brcs	.-16     	; 0x6d6 <delay_nop+0x10>
 6e6:	00 00       	nop
 6e8:	0f 90       	pop	r0
 6ea:	0f 90       	pop	r0
 6ec:	df 91       	pop	r29
 6ee:	cf 91       	pop	r28
 6f0:	08 95       	ret

000006f2 <write_lcd_f>:
 6f2:	91 e0       	ldi	r25, 0x01	; 1
 6f4:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <write_RGB_LCD_activ>
 6f8:	40 9a       	sbi	0x08, 0	; 8
 6fa:	41 98       	cbi	0x08, 1	; 8
 6fc:	41 98       	cbi	0x08, 1	; 8
 6fe:	41 9a       	sbi	0x08, 1	; 8
 700:	41 9a       	sbi	0x08, 1	; 8
 702:	41 98       	cbi	0x08, 1	; 8
 704:	41 98       	cbi	0x08, 1	; 8
 706:	41 9a       	sbi	0x08, 1	; 8
 708:	41 9a       	sbi	0x08, 1	; 8
 70a:	41 98       	cbi	0x08, 1	; 8
 70c:	41 98       	cbi	0x08, 1	; 8
 70e:	41 9a       	sbi	0x08, 1	; 8
 710:	41 9a       	sbi	0x08, 1	; 8
 712:	41 98       	cbi	0x08, 1	; 8
 714:	41 98       	cbi	0x08, 1	; 8
 716:	41 9a       	sbi	0x08, 1	; 8
 718:	41 9a       	sbi	0x08, 1	; 8
 71a:	41 98       	cbi	0x08, 1	; 8
 71c:	41 98       	cbi	0x08, 1	; 8
 71e:	41 9a       	sbi	0x08, 1	; 8
 720:	40 98       	cbi	0x08, 0	; 8
 722:	41 98       	cbi	0x08, 1	; 8
 724:	41 98       	cbi	0x08, 1	; 8
 726:	41 9a       	sbi	0x08, 1	; 8
 728:	83 34       	cpi	r24, 0x43	; 67
 72a:	a9 f1       	breq	.+106    	; 0x796 <write_lcd_f+0xa4>
 72c:	40 9a       	sbi	0x08, 0	; 8
 72e:	41 98       	cbi	0x08, 1	; 8
 730:	41 98       	cbi	0x08, 1	; 8
 732:	41 9a       	sbi	0x08, 1	; 8
 734:	40 98       	cbi	0x08, 0	; 8
 736:	41 98       	cbi	0x08, 1	; 8
 738:	41 98       	cbi	0x08, 1	; 8
 73a:	41 9a       	sbi	0x08, 1	; 8
 73c:	84 e0       	ldi	r24, 0x04	; 4
 73e:	41 98       	cbi	0x08, 1	; 8
 740:	60 ff       	sbrs	r22, 0
 742:	27 c0       	rjmp	.+78     	; 0x792 <write_lcd_f+0xa0>
 744:	40 9a       	sbi	0x08, 0	; 8
 746:	66 95       	lsr	r22
 748:	41 98       	cbi	0x08, 1	; 8
 74a:	41 9a       	sbi	0x08, 1	; 8
 74c:	81 50       	subi	r24, 0x01	; 1
 74e:	b9 f7       	brne	.-18     	; 0x73e <write_lcd_f+0x4c>
 750:	40 98       	cbi	0x08, 0	; 8
 752:	84 e0       	ldi	r24, 0x04	; 4
 754:	41 98       	cbi	0x08, 1	; 8
 756:	41 98       	cbi	0x08, 1	; 8
 758:	41 9a       	sbi	0x08, 1	; 8
 75a:	81 50       	subi	r24, 0x01	; 1
 75c:	d9 f7       	brne	.-10     	; 0x754 <write_lcd_f+0x62>
 75e:	84 e0       	ldi	r24, 0x04	; 4
 760:	41 98       	cbi	0x08, 1	; 8
 762:	60 ff       	sbrs	r22, 0
 764:	14 c0       	rjmp	.+40     	; 0x78e <write_lcd_f+0x9c>
 766:	40 9a       	sbi	0x08, 0	; 8
 768:	66 95       	lsr	r22
 76a:	41 98       	cbi	0x08, 1	; 8
 76c:	41 9a       	sbi	0x08, 1	; 8
 76e:	81 50       	subi	r24, 0x01	; 1
 770:	b9 f7       	brne	.-18     	; 0x760 <write_lcd_f+0x6e>
 772:	40 98       	cbi	0x08, 0	; 8
 774:	84 e0       	ldi	r24, 0x04	; 4
 776:	41 98       	cbi	0x08, 1	; 8
 778:	41 98       	cbi	0x08, 1	; 8
 77a:	41 9a       	sbi	0x08, 1	; 8
 77c:	81 50       	subi	r24, 0x01	; 1
 77e:	d9 f7       	brne	.-10     	; 0x776 <write_lcd_f+0x84>
 780:	84 e1       	ldi	r24, 0x14	; 20
 782:	40 9a       	sbi	0x08, 0	; 8
 784:	81 50       	subi	r24, 0x01	; 1
 786:	e9 f7       	brne	.-6      	; 0x782 <write_lcd_f+0x90>
 788:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <write_RGB_LCD_activ>
 78c:	08 95       	ret
 78e:	40 98       	cbi	0x08, 0	; 8
 790:	eb cf       	rjmp	.-42     	; 0x768 <write_lcd_f+0x76>
 792:	40 98       	cbi	0x08, 0	; 8
 794:	d8 cf       	rjmp	.-80     	; 0x746 <write_lcd_f+0x54>
 796:	40 98       	cbi	0x08, 0	; 8
 798:	ca cf       	rjmp	.-108    	; 0x72e <write_lcd_f+0x3c>

0000079a <write_text_ram>:
* y_pos:   Zeile-Nummer (0..3)
* x_pos:   Spalte-Nummer (0..19) (Zeichenposition auf Zeile)
* str_ptr: Adresse des zu schreibenden Textes
\**********************************************************************************/
void write_text_ram(u8 y_pos, u8 x_pos, const char* str_ptr)
{	u8 str_p = 0;
 79a:	0f 93       	push	r16
 79c:	1f 93       	push	r17
 79e:	df 93       	push	r29
 7a0:	8a 01       	movw	r16, r20
	
	x_pos += y_pos * 0x20;																					// Position auf LCD berechnen 4x20 Zeichen
	write_lcd_f ('C',x_pos | 0x80);																	// LCD-Cursor auf gewünsschte Adresse setzen = Position auf LCD
 7a2:	90 e2       	ldi	r25, 0x20	; 32
 7a4:	89 9f       	mul	r24, r25
 7a6:	60 0d       	add	r22, r0
 7a8:	11 24       	eor	r1, r1
 7aa:	60 68       	ori	r22, 0x80	; 128
 7ac:	83 e4       	ldi	r24, 0x43	; 67
 7ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <write_lcd_f>
	while (str_ptr[str_p]) write_lcd_f ('D',str_ptr[str_p++]);			// Daten in obige Adresse schreiben
 7b2:	f8 01       	movw	r30, r16
 7b4:	60 81       	ld	r22, Z
 7b6:	66 23       	and	r22, r22
 7b8:	59 f0       	breq	.+22     	; 0x7d0 <write_text_ram+0x36>
 7ba:	d0 e0       	ldi	r29, 0x00	; 0
 7bc:	df 5f       	subi	r29, 0xFF	; 255
 7be:	84 e4       	ldi	r24, 0x44	; 68
 7c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <write_lcd_f>
 7c4:	f8 01       	movw	r30, r16
 7c6:	ed 0f       	add	r30, r29
 7c8:	f1 1d       	adc	r31, r1
 7ca:	60 81       	ld	r22, Z
 7cc:	61 11       	cpse	r22, r1
 7ce:	f6 cf       	rjmp	.-20     	; 0x7bc <write_text_ram+0x22>
}
 7d0:	df 91       	pop	r29
 7d2:	1f 91       	pop	r17
 7d4:	0f 91       	pop	r16
 7d6:	08 95       	ret

000007d8 <write_zahl>:
*         2 = vor der zweitletzten Ziffer das Komma setzen (Zahl=Zahl/100)
*         3 = vor der drittletzten Ziffer das Komma setzen (Zahl=Zahl/1'000)
*         9 = vor der viertletzten Ziffer das Komma setzen (Zahl=Zahl/10'000)
\**********************************************************************************/
void write_zahl(u8 x_pos, u8 y_pos, u32 zahl_v, u8 s_vk, u8 s_nk, u8 komma)
{
 7d8:	2f 92       	push	r2
 7da:	3f 92       	push	r3
 7dc:	4f 92       	push	r4
 7de:	5f 92       	push	r5
 7e0:	6f 92       	push	r6
 7e2:	7f 92       	push	r7
 7e4:	8f 92       	push	r8
 7e6:	9f 92       	push	r9
 7e8:	af 92       	push	r10
 7ea:	bf 92       	push	r11
 7ec:	cf 92       	push	r12
 7ee:	df 92       	push	r13
 7f0:	ef 92       	push	r14
 7f2:	ff 92       	push	r15
 7f4:	0f 93       	push	r16
 7f6:	1f 93       	push	r17
 7f8:	cf 93       	push	r28
 7fa:	df 93       	push	r29
 7fc:	cd b7       	in	r28, 0x3d	; 61
 7fe:	de b7       	in	r29, 0x3e	; 62
 800:	63 97       	sbiw	r28, 0x13	; 19
 802:	0f b6       	in	r0, 0x3f	; 63
 804:	f8 94       	cli
 806:	de bf       	out	0x3e, r29	; 62
 808:	0f be       	out	0x3f, r0	; 63
 80a:	cd bf       	out	0x3d, r28	; 61
 80c:	8a 8b       	std	Y+18, r24	; 0x12
 80e:	6b 8b       	std	Y+19, r22	; 0x13
 810:	29 01       	movw	r4, r18
 812:	3a 01       	movw	r6, r20
 814:	c8 8a       	std	Y+16, r12	; 0x10
	u8		i, pos, pos_t, nullen_loeschen = 1;

	//Umwandlung in die einzelnen Stellen-Zahlen 1er, 10er, 100er, ... 1'000'000'000er
	//zahl_v = 1234567890;

	if(s_vk >= 100) 
 816:	04 36       	cpi	r16, 0x64	; 100
 818:	08 f4       	brcc	.+2      	; 0x81c <write_zahl+0x44>
 81a:	bd c0       	rjmp	.+378    	; 0x996 <write_zahl+0x1be>
	{ s_vk -= 100;
 81c:	04 56       	subi	r16, 0x64	; 100
		nullen_loeschen = 0;
 81e:	19 8a       	std	Y+17, r1	; 0x11
 820:	0b 30       	cpi	r16, 0x0B	; 11
 822:	08 f0       	brcs	.+2      	; 0x826 <write_zahl+0x4e>
 824:	0a e0       	ldi	r16, 0x0A	; 10
 826:	ef 86       	std	Y+15, r14	; 0x0f
 828:	88 89       	ldd	r24, Y+16	; 0x10
 82a:	8e 15       	cp	r24, r14
 82c:	08 f4       	brcc	.+2      	; 0x830 <write_zahl+0x58>
 82e:	8f 87       	std	Y+15, r24	; 0x0f
	}
	if(s_vk > 10) s_vk = 10;
	
	if (s_nk > komma) s_nk = komma;									// unmöglicher Fall: mehr Nachkommastellen als Komma überhaupt geschoben werden 
	if (s_vk + s_nk > 10) s_nk = 10 - s_vk;					// unsinniger  Fall: zu viele Stellen
 830:	20 2e       	mov	r2, r16
 832:	31 2c       	mov	r3, r1
 834:	c1 01       	movw	r24, r2
 836:	ef 85       	ldd	r30, Y+15	; 0x0f
 838:	8e 0f       	add	r24, r30
 83a:	91 1d       	adc	r25, r1
 83c:	0b 97       	sbiw	r24, 0x0b	; 11
 83e:	1c f0       	brlt	.+6      	; 0x846 <write_zahl+0x6e>
 840:	8a e0       	ldi	r24, 0x0A	; 10
 842:	80 1b       	sub	r24, r16
 844:	8f 87       	std	Y+15, r24	; 0x0f
	
	zehner		= 10;
	send_buffer[11] = (zahl_v % 10) + 48;
 846:	c3 01       	movw	r24, r6
 848:	b2 01       	movw	r22, r4
 84a:	2a e0       	ldi	r18, 0x0A	; 10
 84c:	30 e0       	ldi	r19, 0x00	; 0
 84e:	40 e0       	ldi	r20, 0x00	; 0
 850:	50 e0       	ldi	r21, 0x00	; 0
 852:	0e 94 aa 05 	call	0xb54	; 0xb54 <__udivmodsi4>
 856:	60 5d       	subi	r22, 0xD0	; 208
 858:	6c 87       	std	Y+12, r22	; 0x0c
	i = 10;
 85a:	1a e0       	ldi	r17, 0x0A	; 10
	if(s_vk > 10) s_vk = 10;
	
	if (s_nk > komma) s_nk = komma;									// unmöglicher Fall: mehr Nachkommastellen als Komma überhaupt geschoben werden 
	if (s_vk + s_nk > 10) s_nk = 10 - s_vk;					// unsinniger  Fall: zu viele Stellen
	
	zehner		= 10;
 85c:	3a e0       	ldi	r19, 0x0A	; 10
 85e:	c3 2e       	mov	r12, r19
 860:	d1 2c       	mov	r13, r1
 862:	e1 2c       	mov	r14, r1
 864:	f1 2c       	mov	r15, r1
	send_buffer[11] = (zahl_v % 10) + 48;
	i = 10;
	do
	{ send_buffer[i] = ( (zahl_v / zehner) % 10) + 48;
 866:	4a e0       	ldi	r20, 0x0A	; 10
 868:	84 2e       	mov	r8, r20
 86a:	91 2c       	mov	r9, r1
 86c:	a1 2c       	mov	r10, r1
 86e:	b1 2c       	mov	r11, r1
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	8c 0f       	add	r24, r28
 876:	9d 1f       	adc	r25, r29
 878:	81 0f       	add	r24, r17
 87a:	91 1d       	adc	r25, r1
 87c:	9e 87       	std	Y+14, r25	; 0x0e
 87e:	8d 87       	std	Y+13, r24	; 0x0d
 880:	c3 01       	movw	r24, r6
 882:	b2 01       	movw	r22, r4
 884:	a7 01       	movw	r20, r14
 886:	96 01       	movw	r18, r12
 888:	0e 94 aa 05 	call	0xb54	; 0xb54 <__udivmodsi4>
 88c:	ca 01       	movw	r24, r20
 88e:	b9 01       	movw	r22, r18
 890:	a5 01       	movw	r20, r10
 892:	94 01       	movw	r18, r8
 894:	0e 94 aa 05 	call	0xb54	; 0xb54 <__udivmodsi4>
 898:	60 5d       	subi	r22, 0xD0	; 208
 89a:	ed 85       	ldd	r30, Y+13	; 0x0d
 89c:	fe 85       	ldd	r31, Y+14	; 0x0e
 89e:	60 83       	st	Z, r22
		zehner *= 10;
 8a0:	cc 0c       	add	r12, r12
 8a2:	dd 1c       	adc	r13, r13
 8a4:	ee 1c       	adc	r14, r14
 8a6:	ff 1c       	adc	r15, r15
 8a8:	d7 01       	movw	r26, r14
 8aa:	c6 01       	movw	r24, r12
 8ac:	88 0f       	add	r24, r24
 8ae:	99 1f       	adc	r25, r25
 8b0:	aa 1f       	adc	r26, r26
 8b2:	bb 1f       	adc	r27, r27
 8b4:	88 0f       	add	r24, r24
 8b6:	99 1f       	adc	r25, r25
 8b8:	aa 1f       	adc	r26, r26
 8ba:	bb 1f       	adc	r27, r27
 8bc:	c8 0e       	add	r12, r24
 8be:	d9 1e       	adc	r13, r25
 8c0:	ea 1e       	adc	r14, r26
 8c2:	fb 1e       	adc	r15, r27
	} while(i--);
 8c4:	11 50       	subi	r17, 0x01	; 1
 8c6:	a0 f6       	brcc	.-88     	; 0x870 <write_zahl+0x98>
 8c8:	2c e0       	ldi	r18, 0x0C	; 12
 8ca:	f8 89       	ldd	r31, Y+16	; 0x10
 8cc:	2f 1b       	sub	r18, r31

	//Vor-Kommastellen kopieren
	pos = 0;
	pos_t = 12-komma-s_vk;
 8ce:	82 2f       	mov	r24, r18
 8d0:	80 1b       	sub	r24, r16
	//if(s_vk == 0) pos_t
	for (i = 0; i < s_vk; i++)
 8d2:	00 23       	and	r16, r16
 8d4:	09 f4       	brne	.+2      	; 0x8d8 <write_zahl+0x100>
 8d6:	85 c0       	rjmp	.+266    	; 0x9e2 <write_zahl+0x20a>
 8d8:	fe 01       	movw	r30, r28
 8da:	31 96       	adiw	r30, 0x01	; 1
	{ send_buffer[pos++] = send_buffer[pos_t++];
 8dc:	a1 e0       	ldi	r26, 0x01	; 1
 8de:	b0 e0       	ldi	r27, 0x00	; 0
 8e0:	ac 0f       	add	r26, r28
 8e2:	bd 1f       	adc	r27, r29
 8e4:	a8 0f       	add	r26, r24
 8e6:	b1 1d       	adc	r27, r1
 8e8:	9c 91       	ld	r25, X
 8ea:	91 93       	st	Z+, r25
 8ec:	8f 5f       	subi	r24, 0xFF	; 255

	//Vor-Kommastellen kopieren
	pos = 0;
	pos_t = 12-komma-s_vk;
	//if(s_vk == 0) pos_t
	for (i = 0; i < s_vk; i++)
 8ee:	28 13       	cpse	r18, r24
 8f0:	f5 cf       	rjmp	.-22     	; 0x8dc <write_zahl+0x104>
	{ send_buffer[pos++] = send_buffer[pos_t++];
	}
	if (s_nk > 0)
 8f2:	8f 85       	ldd	r24, Y+15	; 0x0f
 8f4:	81 11       	cpse	r24, r1
 8f6:	52 c0       	rjmp	.+164    	; 0x99c <write_zahl+0x1c4>
 8f8:	f1 01       	movw	r30, r2

		//Nach-Kommastellen kopieren
		pos_t = 12-komma;
		for (i = 0; i < s_nk; i++) send_buffer[pos++] = send_buffer[pos_t++];
	}
	send_buffer[pos] = 0;    //Endmarke des Strings setzen
 8fa:	81 e0       	ldi	r24, 0x01	; 1
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	8c 0f       	add	r24, r28
 900:	9d 1f       	adc	r25, r29
 902:	e8 0f       	add	r30, r24
 904:	f9 1f       	adc	r31, r25
 906:	10 82       	st	Z, r1

	if(nullen_loeschen)
 908:	99 89       	ldd	r25, Y+17	; 0x11
 90a:	99 23       	and	r25, r25
 90c:	21 f1       	breq	.+72     	; 0x956 <write_zahl+0x17e>
	{ //Vorangehende Nullen löschen		(xyz)
	  i = 0;
	  while ((send_buffer[i] == 48) && (i < s_vk-1)) send_buffer[i++] = 32;
 90e:	89 81       	ldd	r24, Y+1	; 0x01
 910:	80 33       	cpi	r24, 0x30	; 48
 912:	09 f5       	brne	.+66     	; 0x956 <write_zahl+0x17e>
 914:	a1 01       	movw	r20, r2
 916:	41 50       	subi	r20, 0x01	; 1
 918:	51 09       	sbc	r21, r1
 91a:	14 16       	cp	r1, r20
 91c:	15 06       	cpc	r1, r21
 91e:	dc f4       	brge	.+54     	; 0x956 <write_zahl+0x17e>
 920:	80 e0       	ldi	r24, 0x00	; 0
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	20 e0       	ldi	r18, 0x00	; 0
 926:	60 e2       	ldi	r22, 0x20	; 32
 928:	03 c0       	rjmp	.+6      	; 0x930 <write_zahl+0x158>
 92a:	84 17       	cp	r24, r20
 92c:	95 07       	cpc	r25, r21
 92e:	9c f4       	brge	.+38     	; 0x956 <write_zahl+0x17e>
 930:	2f 5f       	subi	r18, 0xFF	; 255
 932:	e1 e0       	ldi	r30, 0x01	; 1
 934:	f0 e0       	ldi	r31, 0x00	; 0
 936:	ec 0f       	add	r30, r28
 938:	fd 1f       	adc	r31, r29
 93a:	e8 0f       	add	r30, r24
 93c:	f9 1f       	adc	r31, r25
 93e:	60 83       	st	Z, r22
 940:	82 2f       	mov	r24, r18
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	e1 e0       	ldi	r30, 0x01	; 1
 946:	f0 e0       	ldi	r31, 0x00	; 0
 948:	ec 0f       	add	r30, r28
 94a:	fd 1f       	adc	r31, r29
 94c:	e8 0f       	add	r30, r24
 94e:	f9 1f       	adc	r31, r25
 950:	30 81       	ld	r19, Z
 952:	30 33       	cpi	r19, 0x30	; 48
 954:	51 f3       	breq	.-44     	; 0x92a <write_zahl+0x152>
	}
	
	write_text_ram(x_pos, y_pos, send_buffer);
 956:	ae 01       	movw	r20, r28
 958:	4f 5f       	subi	r20, 0xFF	; 255
 95a:	5f 4f       	sbci	r21, 0xFF	; 255
 95c:	6b 89       	ldd	r22, Y+19	; 0x13
 95e:	8a 89       	ldd	r24, Y+18	; 0x12
 960:	0e 94 cd 03 	call	0x79a	; 0x79a <write_text_ram>
}
 964:	63 96       	adiw	r28, 0x13	; 19
 966:	0f b6       	in	r0, 0x3f	; 63
 968:	f8 94       	cli
 96a:	de bf       	out	0x3e, r29	; 62
 96c:	0f be       	out	0x3f, r0	; 63
 96e:	cd bf       	out	0x3d, r28	; 61
 970:	df 91       	pop	r29
 972:	cf 91       	pop	r28
 974:	1f 91       	pop	r17
 976:	0f 91       	pop	r16
 978:	ff 90       	pop	r15
 97a:	ef 90       	pop	r14
 97c:	df 90       	pop	r13
 97e:	cf 90       	pop	r12
 980:	bf 90       	pop	r11
 982:	af 90       	pop	r10
 984:	9f 90       	pop	r9
 986:	8f 90       	pop	r8
 988:	7f 90       	pop	r7
 98a:	6f 90       	pop	r6
 98c:	5f 90       	pop	r5
 98e:	4f 90       	pop	r4
 990:	3f 90       	pop	r3
 992:	2f 90       	pop	r2
 994:	08 95       	ret
\**********************************************************************************/
void write_zahl(u8 x_pos, u8 y_pos, u32 zahl_v, u8 s_vk, u8 s_nk, u8 komma)
{
	u32		zehner;
	char	send_buffer[12];
	u8		i, pos, pos_t, nullen_loeschen = 1;
 996:	21 e0       	ldi	r18, 0x01	; 1
 998:	29 8b       	std	Y+17, r18	; 0x11
 99a:	42 cf       	rjmp	.-380    	; 0x820 <write_zahl+0x48>
	//if(s_vk == 0) pos_t
	for (i = 0; i < s_vk; i++)
	{ send_buffer[pos++] = send_buffer[pos_t++];
	}
	if (s_nk > 0)
	{ send_buffer[pos++] = '.';
 99c:	0f 5f       	subi	r16, 0xFF	; 255
 99e:	8e e2       	ldi	r24, 0x2E	; 46
 9a0:	e1 e0       	ldi	r30, 0x01	; 1
 9a2:	f0 e0       	ldi	r31, 0x00	; 0
 9a4:	ec 0f       	add	r30, r28
 9a6:	fd 1f       	adc	r31, r29
 9a8:	e2 0d       	add	r30, r2
 9aa:	f3 1d       	adc	r31, r3
 9ac:	80 83       	st	Z, r24
 9ae:	e0 2f       	mov	r30, r16
 9b0:	20 1b       	sub	r18, r16

		//Nach-Kommastellen kopieren
		pos_t = 12-komma;
		for (i = 0; i < s_nk; i++) send_buffer[pos++] = send_buffer[pos_t++];
 9b2:	82 2f       	mov	r24, r18
 9b4:	8e 0f       	add	r24, r30
 9b6:	a1 e0       	ldi	r26, 0x01	; 1
 9b8:	b0 e0       	ldi	r27, 0x00	; 0
 9ba:	ac 0f       	add	r26, r28
 9bc:	bd 1f       	adc	r27, r29
 9be:	a8 0f       	add	r26, r24
 9c0:	b1 1d       	adc	r27, r1
 9c2:	8c 91       	ld	r24, X
 9c4:	a1 e0       	ldi	r26, 0x01	; 1
 9c6:	b0 e0       	ldi	r27, 0x00	; 0
 9c8:	ac 0f       	add	r26, r28
 9ca:	bd 1f       	adc	r27, r29
 9cc:	ae 0f       	add	r26, r30
 9ce:	b1 1d       	adc	r27, r1
 9d0:	8c 93       	st	X, r24
 9d2:	ef 5f       	subi	r30, 0xFF	; 255
 9d4:	8e 2f       	mov	r24, r30
 9d6:	80 1b       	sub	r24, r16
 9d8:	9f 85       	ldd	r25, Y+15	; 0x0f
 9da:	89 17       	cp	r24, r25
 9dc:	50 f3       	brcs	.-44     	; 0x9b2 <write_zahl+0x1da>
 9de:	f0 e0       	ldi	r31, 0x00	; 0
 9e0:	8c cf       	rjmp	.-232    	; 0x8fa <write_zahl+0x122>
	pos_t = 12-komma-s_vk;
	//if(s_vk == 0) pos_t
	for (i = 0; i < s_vk; i++)
	{ send_buffer[pos++] = send_buffer[pos_t++];
	}
	if (s_nk > 0)
 9e2:	ef 85       	ldd	r30, Y+15	; 0x0f
 9e4:	ee 23       	and	r30, r30
 9e6:	21 f0       	breq	.+8      	; 0x9f0 <write_zahl+0x218>
	{ send_buffer[pos++] = '.';
 9e8:	8e e2       	ldi	r24, 0x2E	; 46
 9ea:	89 83       	std	Y+1, r24	; 0x01
 9ec:	01 e0       	ldi	r16, 0x01	; 1
 9ee:	df cf       	rjmp	.-66     	; 0x9ae <write_zahl+0x1d6>
	pos_t = 12-komma-s_vk;
	//if(s_vk == 0) pos_t
	for (i = 0; i < s_vk; i++)
	{ send_buffer[pos++] = send_buffer[pos_t++];
	}
	if (s_nk > 0)
 9f0:	e0 e0       	ldi	r30, 0x00	; 0
 9f2:	f0 e0       	ldi	r31, 0x00	; 0
 9f4:	82 cf       	rjmp	.-252    	; 0x8fa <write_zahl+0x122>

000009f6 <lcd_init>:
*
* Initialisierung des integrierten LCD-Displays
\**********************************************************************************/

void lcd_init(void)
{	u8 i;
 9f6:	df 93       	push	r29
	
	DDRC |= 0x01;													// Port PC0 auf Output setzen LCD-Outputs SOD
 9f8:	38 9a       	sbi	0x07, 0	; 7
	DDRC |= 0x02;													// Port PC1 auf Output setzen LCD-Outputs SCLK
 9fa:	39 9a       	sbi	0x07, 1	; 7
 9fc:	d2 e3       	ldi	r29, 0x32	; 50

	for(i=0; i<50; i++) delay_nop(120);   // 10ms (50x 0.2us) warten, bis LCD gestartet ist (Power-Up)
 9fe:	88 e7       	ldi	r24, 0x78	; 120
 a00:	0e 94 63 03 	call	0x6c6	; 0x6c6 <delay_nop>
 a04:	d1 50       	subi	r29, 0x01	; 1
 a06:	d9 f7       	brne	.-10     	; 0x9fe <lcd_init+0x8>
	
	write_lcd_f('C',0x34);								// set 8-Bit-Interface RE = 1
 a08:	64 e3       	ldi	r22, 0x34	; 52
 a0a:	83 e4       	ldi	r24, 0x43	; 67
 a0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <write_lcd_f>
	write_lcd_f('C',0x34);								// Nochmals, denn einige LCD starten sonst nicht korrekt.
 a10:	64 e3       	ldi	r22, 0x34	; 52
 a12:	83 e4       	ldi	r24, 0x43	; 67
 a14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <write_lcd_f>
	write_lcd_f('C',0x09);								// 4-Zeilen-Modus, 5-Dot Font-Breite
 a18:	69 e0       	ldi	r22, 0x09	; 9
 a1a:	83 e4       	ldi	r24, 0x43	; 67
 a1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <write_lcd_f>
	write_lcd_f('C',0x30);								// set 8-Bit-Interface RE = 0
 a20:	60 e3       	ldi	r22, 0x30	; 48
 a22:	83 e4       	ldi	r24, 0x43	; 67
 a24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <write_lcd_f>
	write_lcd_f('C',0x0C);								// Display ON, Cursor OFF
 a28:	6c e0       	ldi	r22, 0x0C	; 12
 a2a:	83 e4       	ldi	r24, 0x43	; 67
 a2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <write_lcd_f>
	write_lcd_f('C',0x01);								// Clear Display
 a30:	61 e0       	ldi	r22, 0x01	; 1
 a32:	83 e4       	ldi	r24, 0x43	; 67
 a34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <write_lcd_f>
 a38:	d8 e0       	ldi	r29, 0x08	; 8
	for(i=0; i<8; i++) delay_nop(120);		// 1.6ms (8x 0.2us) warten, bis LCD gelöscht ist 
 a3a:	88 e7       	ldi	r24, 0x78	; 120
 a3c:	0e 94 63 03 	call	0x6c6	; 0x6c6 <delay_nop>
 a40:	d1 50       	subi	r29, 0x01	; 1
 a42:	d9 f7       	brne	.-10     	; 0xa3a <lcd_init+0x44>
	
	write_lcd_f('C',0x07);								// Entry Mode
 a44:	67 e0       	ldi	r22, 0x07	; 7
 a46:	83 e4       	ldi	r24, 0x43	; 67
 a48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <write_lcd_f>
	init_Timer0_1ms_int(); //Timer0 initialisierung 1ms interrupt
}
 a4c:	df 91       	pop	r29
	write_lcd_f('C',0x0C);								// Display ON, Cursor OFF
	write_lcd_f('C',0x01);								// Clear Display
	for(i=0; i<8; i++) delay_nop(120);		// 1.6ms (8x 0.2us) warten, bis LCD gelöscht ist 
	
	write_lcd_f('C',0x07);								// Entry Mode
	init_Timer0_1ms_int(); //Timer0 initialisierung 1ms interrupt
 a4e:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <init_Timer0_1ms_int>

00000a52 <clear_lcd>:
*
* Löscht die Anzeige auf dem LCD-Display
\**********************************************************************************/

void clear_lcd(void)
{ u8 i;
 a52:	df 93       	push	r29
	write_lcd_f('C',0x01);      //Clear Display
 a54:	61 e0       	ldi	r22, 0x01	; 1
 a56:	83 e4       	ldi	r24, 0x43	; 67
 a58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <write_lcd_f>
 a5c:	d8 e0       	ldi	r29, 0x08	; 8
	for(i=0; i<8; i++) delay_nop(120);		// 1.6ms (8x 0.2us) warten, bis LCD gelöscht ist 
 a5e:	88 e7       	ldi	r24, 0x78	; 120
 a60:	0e 94 63 03 	call	0x6c6	; 0x6c6 <delay_nop>
 a64:	d1 50       	subi	r29, 0x01	; 1
 a66:	d9 f7       	brne	.-10     	; 0xa5e <clear_lcd+0xc>
}
 a68:	df 91       	pop	r29
 a6a:	08 95       	ret

00000a6c <LED_Show>:
													// Definition mit "PROGMEM", Lesen mit "pgm_read_byte, pgm_read_ptr"
																		
#pragma GCC optimize 0								// Optimierung ausschalten, damit das Debugging möglich ist

void LED_Show(void)
{
 a6c:	cf 93       	push	r28
 a6e:	df 93       	push	r29
 a70:	1f 92       	push	r1
 a72:	cd b7       	in	r28, 0x3d	; 61
 a74:	de b7       	in	r29, 0x3e	; 62
	u8 i;
	
	PORTB=0x01;
 a76:	85 e2       	ldi	r24, 0x25	; 37
 a78:	90 e0       	ldi	r25, 0x00	; 0
 a7a:	21 e0       	ldi	r18, 0x01	; 1
 a7c:	fc 01       	movw	r30, r24
 a7e:	20 83       	st	Z, r18
	for(i=0;i<8;i++)
 a80:	19 82       	std	Y+1, r1	; 0x01
 a82:	17 c0       	rjmp	.+46     	; 0xab2 <LED_Show+0x46>
	{
		wait_1ms(50);
 a84:	62 e3       	ldi	r22, 0x32	; 50
 a86:	70 e0       	ldi	r23, 0x00	; 0
 a88:	80 e0       	ldi	r24, 0x00	; 0
 a8a:	90 e0       	ldi	r25, 0x00	; 0
 a8c:	0e 94 23 03 	call	0x646	; 0x646 <wait_1ms>
		PORTB=0x01<<i;
 a90:	85 e2       	ldi	r24, 0x25	; 37
 a92:	90 e0       	ldi	r25, 0x00	; 0
 a94:	29 81       	ldd	r18, Y+1	; 0x01
 a96:	42 2f       	mov	r20, r18
 a98:	50 e0       	ldi	r21, 0x00	; 0
 a9a:	21 e0       	ldi	r18, 0x01	; 1
 a9c:	30 e0       	ldi	r19, 0x00	; 0
 a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <LED_Show+0x38>
 aa0:	22 0f       	add	r18, r18
 aa2:	33 1f       	adc	r19, r19
 aa4:	4a 95       	dec	r20
 aa6:	e2 f7       	brpl	.-8      	; 0xaa0 <LED_Show+0x34>
 aa8:	fc 01       	movw	r30, r24
 aaa:	20 83       	st	Z, r18
void LED_Show(void)
{
	u8 i;
	
	PORTB=0x01;
	for(i=0;i<8;i++)
 aac:	89 81       	ldd	r24, Y+1	; 0x01
 aae:	8f 5f       	subi	r24, 0xFF	; 255
 ab0:	89 83       	std	Y+1, r24	; 0x01
 ab2:	89 81       	ldd	r24, Y+1	; 0x01
 ab4:	88 30       	cpi	r24, 0x08	; 8
 ab6:	30 f3       	brcs	.-52     	; 0xa84 <LED_Show+0x18>
	{
		wait_1ms(50);
		PORTB=0x01<<i;
	}
	PORTB=0x80;
 ab8:	85 e2       	ldi	r24, 0x25	; 37
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	20 e8       	ldi	r18, 0x80	; 128
 abe:	fc 01       	movw	r30, r24
 ac0:	20 83       	st	Z, r18
	for(i=0;i<8;i++)
 ac2:	19 82       	std	Y+1, r1	; 0x01
 ac4:	17 c0       	rjmp	.+46     	; 0xaf4 <LED_Show+0x88>
	{
		wait_1ms(50);
 ac6:	62 e3       	ldi	r22, 0x32	; 50
 ac8:	70 e0       	ldi	r23, 0x00	; 0
 aca:	80 e0       	ldi	r24, 0x00	; 0
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	0e 94 23 03 	call	0x646	; 0x646 <wait_1ms>
		PORTB=0x80>>i;
 ad2:	85 e2       	ldi	r24, 0x25	; 37
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	29 81       	ldd	r18, Y+1	; 0x01
 ad8:	42 2f       	mov	r20, r18
 ada:	50 e0       	ldi	r21, 0x00	; 0
 adc:	20 e8       	ldi	r18, 0x80	; 128
 ade:	30 e0       	ldi	r19, 0x00	; 0
 ae0:	02 c0       	rjmp	.+4      	; 0xae6 <LED_Show+0x7a>
 ae2:	35 95       	asr	r19
 ae4:	27 95       	ror	r18
 ae6:	4a 95       	dec	r20
 ae8:	e2 f7       	brpl	.-8      	; 0xae2 <LED_Show+0x76>
 aea:	fc 01       	movw	r30, r24
 aec:	20 83       	st	Z, r18
	{
		wait_1ms(50);
		PORTB=0x01<<i;
	}
	PORTB=0x80;
	for(i=0;i<8;i++)
 aee:	89 81       	ldd	r24, Y+1	; 0x01
 af0:	8f 5f       	subi	r24, 0xFF	; 255
 af2:	89 83       	std	Y+1, r24	; 0x01
 af4:	89 81       	ldd	r24, Y+1	; 0x01
 af6:	88 30       	cpi	r24, 0x08	; 8
 af8:	30 f3       	brcs	.-52     	; 0xac6 <LED_Show+0x5a>
	{
		wait_1ms(50);
		PORTB=0x80>>i;
	}
	wait_1ms(100);
 afa:	64 e6       	ldi	r22, 0x64	; 100
 afc:	70 e0       	ldi	r23, 0x00	; 0
 afe:	80 e0       	ldi	r24, 0x00	; 0
 b00:	90 e0       	ldi	r25, 0x00	; 0
 b02:	0e 94 23 03 	call	0x646	; 0x646 <wait_1ms>
	PORTB=0x00;	
 b06:	85 e2       	ldi	r24, 0x25	; 37
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	fc 01       	movw	r30, r24
 b0c:	10 82       	st	Z, r1
}
 b0e:	00 00       	nop
 b10:	0f 90       	pop	r0
 b12:	df 91       	pop	r29
 b14:	cf 91       	pop	r28
 b16:	08 95       	ret

00000b18 <init_BT_CAR_V2_0>:

void init_BT_CAR_V2_0(void)
{
 b18:	cf 93       	push	r28
 b1a:	df 93       	push	r29
 b1c:	cd b7       	in	r28, 0x3d	; 61
 b1e:	de b7       	in	r29, 0x3e	; 62
	// Initialisierung PortA
	DDRA  = 0x60;			// Eingang PA0..PA4 as Input (analog Signals), PA5 and PA6 as Output and PA7 as Input (SRG Ansteuerung)
 b20:	81 e2       	ldi	r24, 0x21	; 33
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	20 e6       	ldi	r18, 0x60	; 96
 b26:	fc 01       	movw	r30, r24
 b28:	20 83       	st	Z, r18

	//Initialisierung Port B
	DDRB  =  0xFF;			// LED Port, alles Outputs, ACHTUNG PB.0...PB.3 sind auch Taster am LCD Display
 b2a:	84 e2       	ldi	r24, 0x24	; 36
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	2f ef       	ldi	r18, 0xFF	; 255
 b30:	fc 01       	movw	r30, r24
 b32:	20 83       	st	Z, r18
	//PC0, PC1 im LCD Driver definiert
	//PC2...PC5 für JTAG Schnittstelle
	//PC6, PC7 32.678 KHz Quarz 

	//Initialisierung PortD
	DDRD  =  0xFC;			// PD7,PD6,PD5,PD4 als Outputs (PWM), PD3 Output (Enable HB), PD2 Output (Summer)
 b34:	8a e2       	ldi	r24, 0x2A	; 42
 b36:	90 e0       	ldi	r25, 0x00	; 0
 b38:	2c ef       	ldi	r18, 0xFC	; 252
 b3a:	fc 01       	movw	r30, r24
 b3c:	20 83       	st	Z, r18
							// PD1 und PD0 sind TxD und RxD von UART0 werden über RXEN und TXEN aktiviert
							
	sei(); 					// Global Interrupts aktivieren	
 b3e:	78 94       	sei
	lcd_init();				// Das LCD muss ebenfalls initialisiert werden, um später genutz werden zu können
 b40:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <lcd_init>
	clear_lcd();
 b44:	0e 94 29 05 	call	0xa52	; 0xa52 <clear_lcd>
	//write_text(0, 0,PSTR("LCD init ok"));
	LED_Show();							
 b48:	0e 94 36 05 	call	0xa6c	; 0xa6c <LED_Show>
}
 b4c:	00 00       	nop
 b4e:	df 91       	pop	r29
 b50:	cf 91       	pop	r28
 b52:	08 95       	ret

00000b54 <__udivmodsi4>:
 b54:	a1 e2       	ldi	r26, 0x21	; 33
 b56:	1a 2e       	mov	r1, r26
 b58:	aa 1b       	sub	r26, r26
 b5a:	bb 1b       	sub	r27, r27
 b5c:	fd 01       	movw	r30, r26
 b5e:	0d c0       	rjmp	.+26     	; 0xb7a <__udivmodsi4_ep>

00000b60 <__udivmodsi4_loop>:
 b60:	aa 1f       	adc	r26, r26
 b62:	bb 1f       	adc	r27, r27
 b64:	ee 1f       	adc	r30, r30
 b66:	ff 1f       	adc	r31, r31
 b68:	a2 17       	cp	r26, r18
 b6a:	b3 07       	cpc	r27, r19
 b6c:	e4 07       	cpc	r30, r20
 b6e:	f5 07       	cpc	r31, r21
 b70:	20 f0       	brcs	.+8      	; 0xb7a <__udivmodsi4_ep>
 b72:	a2 1b       	sub	r26, r18
 b74:	b3 0b       	sbc	r27, r19
 b76:	e4 0b       	sbc	r30, r20
 b78:	f5 0b       	sbc	r31, r21

00000b7a <__udivmodsi4_ep>:
 b7a:	66 1f       	adc	r22, r22
 b7c:	77 1f       	adc	r23, r23
 b7e:	88 1f       	adc	r24, r24
 b80:	99 1f       	adc	r25, r25
 b82:	1a 94       	dec	r1
 b84:	69 f7       	brne	.-38     	; 0xb60 <__udivmodsi4_loop>
 b86:	60 95       	com	r22
 b88:	70 95       	com	r23
 b8a:	80 95       	com	r24
 b8c:	90 95       	com	r25
 b8e:	9b 01       	movw	r18, r22
 b90:	ac 01       	movw	r20, r24
 b92:	bd 01       	movw	r22, r26
 b94:	cf 01       	movw	r24, r30
 b96:	08 95       	ret

00000b98 <strtok>:
 b98:	42 e5       	ldi	r20, 0x52	; 82
 b9a:	51 e0       	ldi	r21, 0x01	; 1
 b9c:	0e 94 d1 05 	call	0xba2	; 0xba2 <strtok_r>
 ba0:	08 95       	ret

00000ba2 <strtok_r>:
 ba2:	fa 01       	movw	r30, r20
 ba4:	a1 91       	ld	r26, Z+
 ba6:	b0 81       	ld	r27, Z
 ba8:	00 97       	sbiw	r24, 0x00	; 0
 baa:	19 f4       	brne	.+6      	; 0xbb2 <strtok_r+0x10>
 bac:	10 97       	sbiw	r26, 0x00	; 0
 bae:	e1 f0       	breq	.+56     	; 0xbe8 <strtok_r+0x46>
 bb0:	cd 01       	movw	r24, r26
 bb2:	dc 01       	movw	r26, r24
 bb4:	cd 01       	movw	r24, r26
 bb6:	0d 90       	ld	r0, X+
 bb8:	00 20       	and	r0, r0
 bba:	11 f4       	brne	.+4      	; 0xbc0 <strtok_r+0x1e>
 bbc:	c0 01       	movw	r24, r0
 bbe:	13 c0       	rjmp	.+38     	; 0xbe6 <strtok_r+0x44>
 bc0:	fb 01       	movw	r30, r22
 bc2:	21 91       	ld	r18, Z+
 bc4:	22 23       	and	r18, r18
 bc6:	19 f0       	breq	.+6      	; 0xbce <strtok_r+0x2c>
 bc8:	20 15       	cp	r18, r0
 bca:	d9 f7       	brne	.-10     	; 0xbc2 <strtok_r+0x20>
 bcc:	f3 cf       	rjmp	.-26     	; 0xbb4 <strtok_r+0x12>
 bce:	fb 01       	movw	r30, r22
 bd0:	21 91       	ld	r18, Z+
 bd2:	20 15       	cp	r18, r0
 bd4:	19 f4       	brne	.+6      	; 0xbdc <strtok_r+0x3a>
 bd6:	1e 92       	st	-X, r1
 bd8:	11 96       	adiw	r26, 0x01	; 1
 bda:	06 c0       	rjmp	.+12     	; 0xbe8 <strtok_r+0x46>
 bdc:	22 23       	and	r18, r18
 bde:	c1 f7       	brne	.-16     	; 0xbd0 <strtok_r+0x2e>
 be0:	0d 90       	ld	r0, X+
 be2:	00 20       	and	r0, r0
 be4:	a1 f7       	brne	.-24     	; 0xbce <strtok_r+0x2c>
 be6:	d0 01       	movw	r26, r0
 be8:	fa 01       	movw	r30, r20
 bea:	a1 93       	st	Z+, r26
 bec:	b0 83       	st	Z, r27
 bee:	08 95       	ret

00000bf0 <_exit>:
 bf0:	f8 94       	cli

00000bf2 <__stop_program>:
 bf2:	ff cf       	rjmp	.-2      	; 0xbf2 <__stop_program>
