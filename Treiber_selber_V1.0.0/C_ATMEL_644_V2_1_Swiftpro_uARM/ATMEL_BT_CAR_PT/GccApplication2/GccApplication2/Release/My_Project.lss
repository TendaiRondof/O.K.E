
My_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00000bf8  00000c8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bf8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005a  00800142  00800142  00000cce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017b4  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a6f  00000000  00000000  00002604  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cc8  00000000  00000000  00003073  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000404  00000000  00000000  00003d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000780  00000000  00000000  00004140  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000147e  00000000  00000000  000048c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00005d3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__vector_16>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__vector_20>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e8 ef       	ldi	r30, 0xF8	; 248
  90:	fb e0       	ldi	r31, 0x0B	; 11
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 34       	cpi	r26, 0x42	; 66
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a2 e4       	ldi	r26, 0x42	; 66
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ac 39       	cpi	r26, 0x9C	; 156
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 2f 02 	call	0x45e	; 0x45e <main>
  b2:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <get_DIP_Switch>:
		//Die Schleife läuft durch bis strtok() den NULL-Zeiger zurückliefert.
	}
	k=0;
	uart_str_complete = 0;
	//wait_1ms(Delay_LCD);	
}
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	00 d0       	rcall	.+0      	; 0xc0 <get_DIP_Switch+0x6>
  c0:	1f 92       	push	r1
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	19 82       	std	Y+1, r1	; 0x01
  c8:	82 e2       	ldi	r24, 0x22	; 34
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	22 e2       	ldi	r18, 0x22	; 34
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	f9 01       	movw	r30, r18
  d2:	20 81       	ld	r18, Z
  d4:	20 62       	ori	r18, 0x20	; 32
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
  da:	82 e2       	ldi	r24, 0x22	; 34
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	22 e2       	ldi	r18, 0x22	; 34
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	f9 01       	movw	r30, r18
  e4:	20 81       	ld	r18, Z
  e6:	2f 7d       	andi	r18, 0xDF	; 223
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
  ec:	82 e2       	ldi	r24, 0x22	; 34
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	22 e2       	ldi	r18, 0x22	; 34
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	f9 01       	movw	r30, r18
  f6:	20 81       	ld	r18, Z
  f8:	20 62       	ori	r18, 0x20	; 32
  fa:	fc 01       	movw	r30, r24
  fc:	20 83       	st	Z, r18
  fe:	87 e0       	ldi	r24, 0x07	; 7
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	9b 83       	std	Y+3, r25	; 0x03
 104:	8a 83       	std	Y+2, r24	; 0x02
 106:	30 c0       	rjmp	.+96     	; 0x168 <get_DIP_Switch+0xae>
 108:	80 e2       	ldi	r24, 0x20	; 32
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	fc 01       	movw	r30, r24
 10e:	80 81       	ld	r24, Z
 110:	88 2f       	mov	r24, r24
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	80 78       	andi	r24, 0x80	; 128
 116:	99 27       	eor	r25, r25
 118:	47 e0       	ldi	r20, 0x07	; 7
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	2a 81       	ldd	r18, Y+2	; 0x02
 11e:	3b 81       	ldd	r19, Y+3	; 0x03
 120:	ba 01       	movw	r22, r20
 122:	62 1b       	sub	r22, r18
 124:	73 0b       	sbc	r23, r19
 126:	9b 01       	movw	r18, r22
 128:	02 c0       	rjmp	.+4      	; 0x12e <get_DIP_Switch+0x74>
 12a:	95 95       	asr	r25
 12c:	87 95       	ror	r24
 12e:	2a 95       	dec	r18
 130:	e2 f7       	brpl	.-8      	; 0x12a <get_DIP_Switch+0x70>
 132:	98 2f       	mov	r25, r24
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	89 2b       	or	r24, r25
 138:	89 83       	std	Y+1, r24	; 0x01
 13a:	82 e2       	ldi	r24, 0x22	; 34
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	22 e2       	ldi	r18, 0x22	; 34
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	f9 01       	movw	r30, r18
 144:	20 81       	ld	r18, Z
 146:	2f 7b       	andi	r18, 0xBF	; 191
 148:	fc 01       	movw	r30, r24
 14a:	20 83       	st	Z, r18
 14c:	82 e2       	ldi	r24, 0x22	; 34
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	22 e2       	ldi	r18, 0x22	; 34
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	f9 01       	movw	r30, r18
 156:	20 81       	ld	r18, Z
 158:	20 64       	ori	r18, 0x40	; 64
 15a:	fc 01       	movw	r30, r24
 15c:	20 83       	st	Z, r18
 15e:	8a 81       	ldd	r24, Y+2	; 0x02
 160:	9b 81       	ldd	r25, Y+3	; 0x03
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	9b 83       	std	Y+3, r25	; 0x03
 166:	8a 83       	std	Y+2, r24	; 0x02
 168:	8a 81       	ldd	r24, Y+2	; 0x02
 16a:	9b 81       	ldd	r25, Y+3	; 0x03
 16c:	99 23       	and	r25, r25
 16e:	64 f6       	brge	.-104    	; 0x108 <get_DIP_Switch+0x4e>
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	0f 90       	pop	r0
 174:	0f 90       	pop	r0
 176:	0f 90       	pop	r0
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <get_LCD_Taster>:
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	1f 92       	push	r1
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
 188:	85 e2       	ldi	r24, 0x25	; 37
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	25 e2       	ldi	r18, 0x25	; 37
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	f9 01       	movw	r30, r18
 192:	20 81       	ld	r18, Z
 194:	20 7f       	andi	r18, 0xF0	; 240
 196:	fc 01       	movw	r30, r24
 198:	20 83       	st	Z, r18
 19a:	84 e2       	ldi	r24, 0x24	; 36
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	20 ef       	ldi	r18, 0xF0	; 240
 1a0:	fc 01       	movw	r30, r24
 1a2:	20 83       	st	Z, r18
	...
 1b8:	83 e2       	ldi	r24, 0x23	; 35
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	fc 01       	movw	r30, r24
 1be:	80 81       	ld	r24, Z
 1c0:	8f 70       	andi	r24, 0x0F	; 15
 1c2:	89 83       	std	Y+1, r24	; 0x01
 1c4:	84 e2       	ldi	r24, 0x24	; 36
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	2f ef       	ldi	r18, 0xFF	; 255
 1ca:	fc 01       	movw	r30, r24
 1cc:	20 83       	st	Z, r18
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	0f 90       	pop	r0
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <init_ADC>:
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	cd b7       	in	r28, 0x3d	; 61
 1de:	de b7       	in	r29, 0x3e	; 62
 1e0:	8a e7       	ldi	r24, 0x7A	; 122
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	2a e7       	ldi	r18, 0x7A	; 122
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	f9 01       	movw	r30, r18
 1ea:	20 81       	ld	r18, Z
 1ec:	20 68       	ori	r18, 0x80	; 128
 1ee:	fc 01       	movw	r30, r24
 1f0:	20 83       	st	Z, r18
 1f2:	8c e7       	ldi	r24, 0x7C	; 124
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	2c e7       	ldi	r18, 0x7C	; 124
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	f9 01       	movw	r30, r18
 1fc:	20 81       	ld	r18, Z
 1fe:	20 64       	ori	r18, 0x40	; 64
 200:	fc 01       	movw	r30, r24
 202:	20 83       	st	Z, r18
 204:	8a e7       	ldi	r24, 0x7A	; 122
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	2a e7       	ldi	r18, 0x7A	; 122
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	f9 01       	movw	r30, r18
 20e:	20 81       	ld	r18, Z
 210:	27 60       	ori	r18, 0x07	; 7
 212:	fc 01       	movw	r30, r24
 214:	20 83       	st	Z, r18
 216:	00 00       	nop
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <init_UART0>:
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
 226:	84 ec       	ldi	r24, 0xC4	; 196
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	20 e1       	ldi	r18, 0x10	; 16
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	fc 01       	movw	r30, r24
 230:	31 83       	std	Z+1, r19	; 0x01
 232:	20 83       	st	Z, r18
 234:	80 ec       	ldi	r24, 0xC0	; 192
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	20 ec       	ldi	r18, 0xC0	; 192
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	f9 01       	movw	r30, r18
 23e:	20 81       	ld	r18, Z
 240:	22 60       	ori	r18, 0x02	; 2
 242:	fc 01       	movw	r30, r24
 244:	20 83       	st	Z, r18
 246:	81 ec       	ldi	r24, 0xC1	; 193
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	21 ec       	ldi	r18, 0xC1	; 193
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	f9 01       	movw	r30, r18
 250:	20 81       	ld	r18, Z
 252:	28 69       	ori	r18, 0x98	; 152
 254:	fc 01       	movw	r30, r24
 256:	20 83       	st	Z, r18
 258:	00 00       	nop
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <send_Byte>:
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	1f 92       	push	r1
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62
 26a:	89 83       	std	Y+1, r24	; 0x01
 26c:	00 00       	nop
 26e:	80 ec       	ldi	r24, 0xC0	; 192
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	fc 01       	movw	r30, r24
 274:	80 81       	ld	r24, Z
 276:	88 2f       	mov	r24, r24
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	80 72       	andi	r24, 0x20	; 32
 27c:	99 27       	eor	r25, r25
 27e:	89 2b       	or	r24, r25
 280:	b1 f3       	breq	.-20     	; 0x26e <send_Byte+0xe>
 282:	86 ec       	ldi	r24, 0xC6	; 198
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	29 81       	ldd	r18, Y+1	; 0x01
 288:	fc 01       	movw	r30, r24
 28a:	20 83       	st	Z, r18
 28c:	00 00       	nop
 28e:	0f 90       	pop	r0
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <XYZ_to_Display>:
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	00 d0       	rcall	.+0      	; 0x29c <XYZ_to_Display+0x6>
 29c:	cd b7       	in	r28, 0x3d	; 61
 29e:	de b7       	in	r29, 0x3e	; 62
 2a0:	9a 83       	std	Y+2, r25	; 0x02
 2a2:	89 83       	std	Y+1, r24	; 0x01
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <uart_str_complete>
 2aa:	0e 94 2b 05 	call	0xa56	; 0xa56 <clear_lcd>
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	71 e0       	ldi	r23, 0x01	; 1
 2b2:	88 e4       	ldi	r24, 0x48	; 72
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	0e 94 ce 05 	call	0xb9c	; 0xb9c <strtok>
 2ba:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <ptr_Abschnitt+0x1>
 2be:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <ptr_Abschnitt>
 2c2:	1a c0       	rjmp	.+52     	; 0x2f8 <XYZ_to_Display+0x62>
 2c4:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <ptr_Abschnitt>
 2c8:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <ptr_Abschnitt+0x1>
 2cc:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <k>
 2d0:	ac 01       	movw	r20, r24
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	82 2f       	mov	r24, r18
 2d6:	0e 94 cf 03 	call	0x79e	; 0x79e <write_text_ram>
 2da:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <k>
 2de:	8f 5f       	subi	r24, 0xFF	; 255
 2e0:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <k>
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	71 e0       	ldi	r23, 0x01	; 1
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 ce 05 	call	0xb9c	; 0xb9c <strtok>
 2f0:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <ptr_Abschnitt+0x1>
 2f4:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <ptr_Abschnitt>
 2f8:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <ptr_Abschnitt>
 2fc:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <ptr_Abschnitt+0x1>
 300:	89 2b       	or	r24, r25
 302:	01 f7       	brne	.-64     	; 0x2c4 <XYZ_to_Display+0x2e>
 304:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <k>
 308:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <uart_str_complete>
 30c:	89 81       	ldd	r24, Y+1	; 0x01
 30e:	9a 81       	ldd	r25, Y+2	; 0x02
 310:	cc 01       	movw	r24, r24
 312:	a0 e0       	ldi	r26, 0x00	; 0
 314:	b0 e0       	ldi	r27, 0x00	; 0
 316:	bc 01       	movw	r22, r24
 318:	cd 01       	movw	r24, r26
 31a:	0e 94 25 03 	call	0x64a	; 0x64a <wait_1ms>
 31e:	00 00       	nop
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	08 95       	ret

0000032a <to_uARM>:
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	00 d0       	rcall	.+0      	; 0x330 <to_uARM+0x6>
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
 334:	9a 83       	std	Y+2, r25	; 0x02
 336:	89 83       	std	Y+1, r24	; 0x01
 338:	0b c0       	rjmp	.+22     	; 0x350 <to_uARM+0x26>
 33a:	89 81       	ldd	r24, Y+1	; 0x01
 33c:	9a 81       	ldd	r25, Y+2	; 0x02
 33e:	fc 01       	movw	r30, r24
 340:	80 81       	ld	r24, Z
 342:	0e 94 30 01 	call	0x260	; 0x260 <send_Byte>
 346:	89 81       	ldd	r24, Y+1	; 0x01
 348:	9a 81       	ldd	r25, Y+2	; 0x02
 34a:	01 96       	adiw	r24, 0x01	; 1
 34c:	9a 83       	std	Y+2, r25	; 0x02
 34e:	89 83       	std	Y+1, r24	; 0x01
 350:	89 81       	ldd	r24, Y+1	; 0x01
 352:	9a 81       	ldd	r25, Y+2	; 0x02
 354:	fc 01       	movw	r30, r24
 356:	80 81       	ld	r24, Z
 358:	88 23       	and	r24, r24
 35a:	79 f7       	brne	.-34     	; 0x33a <to_uARM+0x10>
 35c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <uart_str_complete>
 360:	00 00       	nop
 362:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <uart_str_complete>
 366:	88 23       	and	r24, r24
 368:	e1 f3       	breq	.-8      	; 0x362 <to_uARM+0x38>
 36a:	00 00       	nop
 36c:	0f 90       	pop	r0
 36e:	0f 90       	pop	r0
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	08 95       	ret

00000376 <send_to_uArm>:
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	00 d0       	rcall	.+0      	; 0x37c <send_to_uArm+0x6>
 37c:	cd b7       	in	r28, 0x3d	; 61
 37e:	de b7       	in	r29, 0x3e	; 62
 380:	9a 83       	std	Y+2, r25	; 0x02
 382:	89 83       	std	Y+1, r24	; 0x01
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	9a 81       	ldd	r25, Y+2	; 0x02
 388:	0e 94 95 01 	call	0x32a	; 0x32a <to_uARM>
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	91 e0       	ldi	r25, 0x01	; 1
 390:	0e 94 95 01 	call	0x32a	; 0x32a <to_uARM>
 394:	04 c0       	rjmp	.+8      	; 0x39e <send_to_uArm+0x28>
 396:	82 e0       	ldi	r24, 0x02	; 2
 398:	91 e0       	ldi	r25, 0x01	; 1
 39a:	0e 94 95 01 	call	0x32a	; 0x32a <to_uARM>
 39e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <uart_string+0x4>
 3a2:	81 33       	cpi	r24, 0x31	; 49
 3a4:	c1 f3       	breq	.-16     	; 0x396 <send_to_uArm+0x20>
 3a6:	89 e0       	ldi	r24, 0x09	; 9
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	0e 94 95 01 	call	0x32a	; 0x32a <to_uARM>
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 4b 01 	call	0x296	; 0x296 <XYZ_to_Display>
 3b6:	00 00       	nop
 3b8:	0f 90       	pop	r0
 3ba:	0f 90       	pop	r0
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	08 95       	ret

000003c2 <__vector_20>:

ISR (USART0_RX_vect) // UART0 Empfangsinterrupt
{
 3c2:	1f 92       	push	r1
 3c4:	0f 92       	push	r0
 3c6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3ca:	0f 92       	push	r0
 3cc:	11 24       	eor	r1, r1
 3ce:	2f 93       	push	r18
 3d0:	8f 93       	push	r24
 3d2:	9f 93       	push	r25
 3d4:	ef 93       	push	r30
 3d6:	ff 93       	push	r31
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
 3dc:	1f 92       	push	r1
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62
  unsigned char nextChar;

  // Daten aus dem Puffer lesen
  nextChar = UDR0;
 3e2:	86 ec       	ldi	r24, 0xC6	; 198
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	fc 01       	movw	r30, r24
 3e8:	80 81       	ld	r24, Z
 3ea:	89 83       	std	Y+1, r24	; 0x01
  if( uart_str_complete == 0 )
 3ec:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <uart_str_complete>
 3f0:	88 23       	and	r24, r24
 3f2:	31 f5       	brne	.+76     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
  {	// Daten werden erst in uart_string geschrieben, wenn nicht String-Ende/max Zeichenlänge erreicht ist/string gerade verarbeitet wird
    if( nextChar != '\n' && nextChar != '\r' && uart_str_count < UART_MAXSTRLEN )
 3f4:	89 81       	ldd	r24, Y+1	; 0x01
 3f6:	8a 30       	cpi	r24, 0x0A	; 10
 3f8:	b1 f0       	breq	.+44     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3fa:	89 81       	ldd	r24, Y+1	; 0x01
 3fc:	8d 30       	cpi	r24, 0x0D	; 13
 3fe:	99 f0       	breq	.+38     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 400:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <uart_str_count>
 404:	82 33       	cpi	r24, 0x32	; 50
 406:	78 f4       	brcc	.+30     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	{
      uart_string[uart_str_count] = nextChar;
 408:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <uart_str_count>
 40c:	88 2f       	mov	r24, r24
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	88 5b       	subi	r24, 0xB8	; 184
 412:	9e 4f       	sbci	r25, 0xFE	; 254
 414:	29 81       	ldd	r18, Y+1	; 0x01
 416:	fc 01       	movw	r30, r24
 418:	20 83       	st	Z, r18
      uart_str_count++;
 41a:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <uart_str_count>
 41e:	8f 5f       	subi	r24, 0xFF	; 255
 420:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <uart_str_count>
      uart_string[uart_str_count] = '\0';
      uart_str_count = 0;
      uart_str_complete = 1;
    }
  }
}
 424:	0d c0       	rjmp	.+26     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
      uart_string[uart_str_count] = nextChar;
      uart_str_count++;
    }
    else 
	{
      uart_string[uart_str_count] = '\0';
 426:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <uart_str_count>
 42a:	88 2f       	mov	r24, r24
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	88 5b       	subi	r24, 0xB8	; 184
 430:	9e 4f       	sbci	r25, 0xFE	; 254
 432:	fc 01       	movw	r30, r24
 434:	10 82       	st	Z, r1
      uart_str_count = 0;
 436:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <uart_str_count>
      uart_str_complete = 1;
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <uart_str_complete>
    }
  }
}
 440:	00 00       	nop
 442:	0f 90       	pop	r0
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	ff 91       	pop	r31
 44a:	ef 91       	pop	r30
 44c:	9f 91       	pop	r25
 44e:	8f 91       	pop	r24
 450:	2f 91       	pop	r18
 452:	0f 90       	pop	r0
 454:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 458:	0f 90       	pop	r0
 45a:	1f 90       	pop	r1
 45c:	18 95       	reti

0000045e <main>:
// ==============================================================================================================
// Hier beginnt das Hauptprogramm "main"
// --------------------------------------------------------------------------------------------------------------

int main (void)
{
 45e:	cf 92       	push	r12
 460:	ef 92       	push	r14
 462:	0f 93       	push	r16
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	00 d0       	rcall	.+0      	; 0x46a <main+0xc>
 46a:	cd b7       	in	r28, 0x3d	; 61
 46c:	de b7       	in	r29, 0x3e	; 62
	init_BT_CAR_V2_0();			// Das Board wird hier initialisiert
 46e:	0e 94 8e 05 	call	0xb1c	; 0xb1c <init_BT_CAR_V2_0>
	//write_text(0,4, PSTR("READY TO GO!"));	
	wait_1ms(1000);	
 472:	68 ee       	ldi	r22, 0xE8	; 232
 474:	73 e0       	ldi	r23, 0x03	; 3
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 25 03 	call	0x64a	; 0x64a <wait_1ms>
	clear_lcd();				// LCD clear
 47e:	0e 94 2b 05 	call	0xa56	; 0xa56 <clear_lcd>
	init_ADC();
 482:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <init_ADC>
	init_UART0();
 486:	0e 94 0f 01 	call	0x21e	; 0x21e <init_UART0>
	send_to_uArm("G0 M202 N0\n");
 48a:	85 e1       	ldi	r24, 0x15	; 21
 48c:	91 e0       	ldi	r25, 0x01	; 1
 48e:	0e 94 bb 01 	call	0x376	; 0x376 <send_to_uArm>
	unsigned char version;
unsigned char taster;

clear_lcd();
 492:	0e 94 2b 05 	call	0xa56	; 0xa56 <clear_lcd>
send_to_uArm("P2201\n");
 496:	81 e2       	ldi	r24, 0x21	; 33
 498:	91 e0       	ldi	r25, 0x01	; 1
 49a:	0e 94 bb 01 	call	0x376	; 0x376 <send_to_uArm>

write_zahl(0,7,version,2,2,2);
 49e:	89 81       	ldd	r24, Y+1	; 0x01
 4a0:	88 2f       	mov	r24, r24
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	a0 e0       	ldi	r26, 0x00	; 0
 4a6:	b0 e0       	ldi	r27, 0x00	; 0
 4a8:	68 94       	set
 4aa:	cc 24       	eor	r12, r12
 4ac:	c1 f8       	bld	r12, 1
 4ae:	68 94       	set
 4b0:	ee 24       	eor	r14, r14
 4b2:	e1 f8       	bld	r14, 1
 4b4:	02 e0       	ldi	r16, 0x02	; 2
 4b6:	9c 01       	movw	r18, r24
 4b8:	ad 01       	movw	r20, r26
 4ba:	67 e0       	ldi	r22, 0x07	; 7
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	0e 94 ee 03 	call	0x7dc	; 0x7dc <write_zahl>
	while(1)
	{
		taster = get_LCD_Taster();
 4c2:	0e 94 bf 00 	call	0x17e	; 0x17e <get_LCD_Taster>
 4c6:	8a 83       	std	Y+2, r24	; 0x02
		DIP_Switch=get_DIP_Switch();
 4c8:	0e 94 5d 00 	call	0xba	; 0xba <get_DIP_Switch>
 4cc:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <DIP_Switch>
		
		
		
		if (taster==(0x01|0x10))
 4d0:	8a 81       	ldd	r24, Y+2	; 0x02
 4d2:	81 31       	cpi	r24, 0x11	; 17
 4d4:	21 f4       	brne	.+8      	; 0x4de <main+0x80>
		{
			send_to_uArm("G0 M2202 N0\n");
 4d6:	88 e2       	ldi	r24, 0x28	; 40
 4d8:	91 e0       	ldi	r25, 0x01	; 1
 4da:	0e 94 bb 01 	call	0x376	; 0x376 <send_to_uArm>
		}
		if (taster==(0x02|0x20))
 4de:	8a 81       	ldd	r24, Y+2	; 0x02
 4e0:	82 32       	cpi	r24, 0x22	; 34
 4e2:	79 f7       	brne	.-34     	; 0x4c2 <main+0x64>
		{
			send_to_uArm("G0 M2201 N0\n");
 4e4:	85 e3       	ldi	r24, 0x35	; 53
 4e6:	91 e0       	ldi	r25, 0x01	; 1
 4e8:	0e 94 bb 01 	call	0x376	; 0x376 <send_to_uArm>
		}
		
	} //end while(1)
 4ec:	ea cf       	rjmp	.-44     	; 0x4c2 <main+0x64>

000004ee <init_Timer0_1ms_int>:
	wert = pgm_read_byte(&str_ptr[str_p++]);
	while(wert != 0)
	{	write_lcd_f ('D',wert);																				// Daten in obige Adresse schreiben
		wert = pgm_read_byte(&str_ptr[str_p++]);
	}
}
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
 4f2:	cd b7       	in	r28, 0x3d	; 61
 4f4:	de b7       	in	r29, 0x3e	; 62
 4f6:	84 e4       	ldi	r24, 0x44	; 68
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	24 e4       	ldi	r18, 0x44	; 68
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	f9 01       	movw	r30, r18
 500:	20 81       	ld	r18, Z
 502:	22 60       	ori	r18, 0x02	; 2
 504:	fc 01       	movw	r30, r24
 506:	20 83       	st	Z, r18
 508:	85 e4       	ldi	r24, 0x45	; 69
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	25 e4       	ldi	r18, 0x45	; 69
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	f9 01       	movw	r30, r18
 512:	20 81       	ld	r18, Z
 514:	23 60       	ori	r18, 0x03	; 3
 516:	fc 01       	movw	r30, r24
 518:	20 83       	st	Z, r18
 51a:	87 e4       	ldi	r24, 0x47	; 71
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	29 ef       	ldi	r18, 0xF9	; 249
 520:	fc 01       	movw	r30, r24
 522:	20 83       	st	Z, r18
 524:	8e e6       	ldi	r24, 0x6E	; 110
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	2e e6       	ldi	r18, 0x6E	; 110
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	f9 01       	movw	r30, r18
 52e:	20 81       	ld	r18, Z
 530:	22 60       	ori	r18, 0x02	; 2
 532:	fc 01       	movw	r30, r24
 534:	20 83       	st	Z, r18
 536:	00 00       	nop
 538:	df 91       	pop	r29
 53a:	cf 91       	pop	r28
 53c:	08 95       	ret

0000053e <__vector_16>:
 53e:	1f 92       	push	r1
 540:	0f 92       	push	r0
 542:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 546:	0f 92       	push	r0
 548:	11 24       	eor	r1, r1
 54a:	2f 93       	push	r18
 54c:	3f 93       	push	r19
 54e:	4f 93       	push	r20
 550:	5f 93       	push	r21
 552:	6f 93       	push	r22
 554:	7f 93       	push	r23
 556:	8f 93       	push	r24
 558:	9f 93       	push	r25
 55a:	af 93       	push	r26
 55c:	bf 93       	push	r27
 55e:	ef 93       	push	r30
 560:	ff 93       	push	r31
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
 566:	cd b7       	in	r28, 0x3d	; 61
 568:	de b7       	in	r29, 0x3e	; 62
 56a:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <tick_1ms>
 56e:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <tick_1ms+0x1>
 572:	a0 91 81 01 	lds	r26, 0x0181	; 0x800181 <tick_1ms+0x2>
 576:	b0 91 82 01 	lds	r27, 0x0182	; 0x800182 <tick_1ms+0x3>
 57a:	01 96       	adiw	r24, 0x01	; 1
 57c:	a1 1d       	adc	r26, r1
 57e:	b1 1d       	adc	r27, r1
 580:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <tick_1ms>
 584:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <tick_1ms+0x1>
 588:	a0 93 81 01 	sts	0x0181, r26	; 0x800181 <tick_1ms+0x2>
 58c:	b0 93 82 01 	sts	0x0182, r27	; 0x800182 <tick_1ms+0x3>
 590:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <tick_1ms>
 594:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <tick_1ms+0x1>
 598:	a0 91 81 01 	lds	r26, 0x0181	; 0x800181 <tick_1ms+0x2>
 59c:	b0 91 82 01 	lds	r27, 0x0182	; 0x800182 <tick_1ms+0x3>
 5a0:	28 ee       	ldi	r18, 0xE8	; 232
 5a2:	33 e0       	ldi	r19, 0x03	; 3
 5a4:	40 e0       	ldi	r20, 0x00	; 0
 5a6:	50 e0       	ldi	r21, 0x00	; 0
 5a8:	bc 01       	movw	r22, r24
 5aa:	cd 01       	movw	r24, r26
 5ac:	0e 94 ac 05 	call	0xb58	; 0xb58 <__udivmodsi4>
 5b0:	dc 01       	movw	r26, r24
 5b2:	cb 01       	movw	r24, r22
 5b4:	89 2b       	or	r24, r25
 5b6:	8a 2b       	or	r24, r26
 5b8:	8b 2b       	or	r24, r27
 5ba:	99 f4       	brne	.+38     	; 0x5e2 <__vector_16+0xa4>
 5bc:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <tick_1s>
 5c0:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <tick_1s+0x1>
 5c4:	a0 91 85 01 	lds	r26, 0x0185	; 0x800185 <tick_1s+0x2>
 5c8:	b0 91 86 01 	lds	r27, 0x0186	; 0x800186 <tick_1s+0x3>
 5cc:	01 96       	adiw	r24, 0x01	; 1
 5ce:	a1 1d       	adc	r26, r1
 5d0:	b1 1d       	adc	r27, r1
 5d2:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <tick_1s>
 5d6:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <tick_1s+0x1>
 5da:	a0 93 85 01 	sts	0x0185, r26	; 0x800185 <tick_1s+0x2>
 5de:	b0 93 86 01 	sts	0x0186, r27	; 0x800186 <tick_1s+0x3>
 5e2:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <tick_1ms_cnt>
 5e6:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <tick_1ms_cnt+0x1>
 5ea:	a0 91 7d 01 	lds	r26, 0x017D	; 0x80017d <tick_1ms_cnt+0x2>
 5ee:	b0 91 7e 01 	lds	r27, 0x017E	; 0x80017e <tick_1ms_cnt+0x3>
 5f2:	89 2b       	or	r24, r25
 5f4:	8a 2b       	or	r24, r26
 5f6:	8b 2b       	or	r24, r27
 5f8:	99 f0       	breq	.+38     	; 0x620 <__vector_16+0xe2>
 5fa:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <tick_1ms_cnt>
 5fe:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <tick_1ms_cnt+0x1>
 602:	a0 91 7d 01 	lds	r26, 0x017D	; 0x80017d <tick_1ms_cnt+0x2>
 606:	b0 91 7e 01 	lds	r27, 0x017E	; 0x80017e <tick_1ms_cnt+0x3>
 60a:	01 97       	sbiw	r24, 0x01	; 1
 60c:	a1 09       	sbc	r26, r1
 60e:	b1 09       	sbc	r27, r1
 610:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <tick_1ms_cnt>
 614:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <tick_1ms_cnt+0x1>
 618:	a0 93 7d 01 	sts	0x017D, r26	; 0x80017d <tick_1ms_cnt+0x2>
 61c:	b0 93 7e 01 	sts	0x017E, r27	; 0x80017e <tick_1ms_cnt+0x3>
 620:	00 00       	nop
 622:	df 91       	pop	r29
 624:	cf 91       	pop	r28
 626:	ff 91       	pop	r31
 628:	ef 91       	pop	r30
 62a:	bf 91       	pop	r27
 62c:	af 91       	pop	r26
 62e:	9f 91       	pop	r25
 630:	8f 91       	pop	r24
 632:	7f 91       	pop	r23
 634:	6f 91       	pop	r22
 636:	5f 91       	pop	r21
 638:	4f 91       	pop	r20
 63a:	3f 91       	pop	r19
 63c:	2f 91       	pop	r18
 63e:	0f 90       	pop	r0
 640:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 644:	0f 90       	pop	r0
 646:	1f 90       	pop	r1
 648:	18 95       	reti

0000064a <wait_1ms>:
 64a:	cf 93       	push	r28
 64c:	df 93       	push	r29
 64e:	00 d0       	rcall	.+0      	; 0x650 <wait_1ms+0x6>
 650:	00 d0       	rcall	.+0      	; 0x652 <wait_1ms+0x8>
 652:	cd b7       	in	r28, 0x3d	; 61
 654:	de b7       	in	r29, 0x3e	; 62
 656:	69 83       	std	Y+1, r22	; 0x01
 658:	7a 83       	std	Y+2, r23	; 0x02
 65a:	8b 83       	std	Y+3, r24	; 0x03
 65c:	9c 83       	std	Y+4, r25	; 0x04
 65e:	89 81       	ldd	r24, Y+1	; 0x01
 660:	9a 81       	ldd	r25, Y+2	; 0x02
 662:	ab 81       	ldd	r26, Y+3	; 0x03
 664:	bc 81       	ldd	r27, Y+4	; 0x04
 666:	89 2b       	or	r24, r25
 668:	8a 2b       	or	r24, r26
 66a:	8b 2b       	or	r24, r27
 66c:	69 f0       	breq	.+26     	; 0x688 <wait_1ms+0x3e>
 66e:	89 81       	ldd	r24, Y+1	; 0x01
 670:	9a 81       	ldd	r25, Y+2	; 0x02
 672:	ab 81       	ldd	r26, Y+3	; 0x03
 674:	bc 81       	ldd	r27, Y+4	; 0x04
 676:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <tick_1ms_cnt>
 67a:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <tick_1ms_cnt+0x1>
 67e:	a0 93 7d 01 	sts	0x017D, r26	; 0x80017d <tick_1ms_cnt+0x2>
 682:	b0 93 7e 01 	sts	0x017E, r27	; 0x80017e <tick_1ms_cnt+0x3>
 686:	0c c0       	rjmp	.+24     	; 0x6a0 <wait_1ms+0x56>
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	a0 e0       	ldi	r26, 0x00	; 0
 68e:	b0 e0       	ldi	r27, 0x00	; 0
 690:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <tick_1ms_cnt>
 694:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <tick_1ms_cnt+0x1>
 698:	a0 93 7d 01 	sts	0x017D, r26	; 0x80017d <tick_1ms_cnt+0x2>
 69c:	b0 93 7e 01 	sts	0x017E, r27	; 0x80017e <tick_1ms_cnt+0x3>
 6a0:	00 00       	nop
 6a2:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <tick_1ms_cnt>
 6a6:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <tick_1ms_cnt+0x1>
 6aa:	a0 91 7d 01 	lds	r26, 0x017D	; 0x80017d <tick_1ms_cnt+0x2>
 6ae:	b0 91 7e 01 	lds	r27, 0x017E	; 0x80017e <tick_1ms_cnt+0x3>
 6b2:	89 2b       	or	r24, r25
 6b4:	8a 2b       	or	r24, r26
 6b6:	8b 2b       	or	r24, r27
 6b8:	a1 f7       	brne	.-24     	; 0x6a2 <wait_1ms+0x58>
 6ba:	00 00       	nop
 6bc:	0f 90       	pop	r0
 6be:	0f 90       	pop	r0
 6c0:	0f 90       	pop	r0
 6c2:	0f 90       	pop	r0
 6c4:	df 91       	pop	r29
 6c6:	cf 91       	pop	r28
 6c8:	08 95       	ret

000006ca <delay_nop>:
 6ca:	cf 93       	push	r28
 6cc:	df 93       	push	r29
 6ce:	00 d0       	rcall	.+0      	; 0x6d0 <delay_nop+0x6>
 6d0:	cd b7       	in	r28, 0x3d	; 61
 6d2:	de b7       	in	r29, 0x3e	; 62
 6d4:	8a 83       	std	Y+2, r24	; 0x02
 6d6:	19 82       	std	Y+1, r1	; 0x01
 6d8:	04 c0       	rjmp	.+8      	; 0x6e2 <delay_nop+0x18>
 6da:	00 00       	nop
 6dc:	89 81       	ldd	r24, Y+1	; 0x01
 6de:	8f 5f       	subi	r24, 0xFF	; 255
 6e0:	89 83       	std	Y+1, r24	; 0x01
 6e2:	99 81       	ldd	r25, Y+1	; 0x01
 6e4:	8a 81       	ldd	r24, Y+2	; 0x02
 6e6:	98 17       	cp	r25, r24
 6e8:	c0 f3       	brcs	.-16     	; 0x6da <delay_nop+0x10>
 6ea:	00 00       	nop
 6ec:	0f 90       	pop	r0
 6ee:	0f 90       	pop	r0
 6f0:	df 91       	pop	r29
 6f2:	cf 91       	pop	r28
 6f4:	08 95       	ret

000006f6 <write_lcd_f>:
 6f6:	91 e0       	ldi	r25, 0x01	; 1
 6f8:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <write_RGB_LCD_activ>
 6fc:	40 9a       	sbi	0x08, 0	; 8
 6fe:	41 98       	cbi	0x08, 1	; 8
 700:	41 98       	cbi	0x08, 1	; 8
 702:	41 9a       	sbi	0x08, 1	; 8
 704:	41 9a       	sbi	0x08, 1	; 8
 706:	41 98       	cbi	0x08, 1	; 8
 708:	41 98       	cbi	0x08, 1	; 8
 70a:	41 9a       	sbi	0x08, 1	; 8
 70c:	41 9a       	sbi	0x08, 1	; 8
 70e:	41 98       	cbi	0x08, 1	; 8
 710:	41 98       	cbi	0x08, 1	; 8
 712:	41 9a       	sbi	0x08, 1	; 8
 714:	41 9a       	sbi	0x08, 1	; 8
 716:	41 98       	cbi	0x08, 1	; 8
 718:	41 98       	cbi	0x08, 1	; 8
 71a:	41 9a       	sbi	0x08, 1	; 8
 71c:	41 9a       	sbi	0x08, 1	; 8
 71e:	41 98       	cbi	0x08, 1	; 8
 720:	41 98       	cbi	0x08, 1	; 8
 722:	41 9a       	sbi	0x08, 1	; 8
 724:	40 98       	cbi	0x08, 0	; 8
 726:	41 98       	cbi	0x08, 1	; 8
 728:	41 98       	cbi	0x08, 1	; 8
 72a:	41 9a       	sbi	0x08, 1	; 8
 72c:	83 34       	cpi	r24, 0x43	; 67
 72e:	a9 f1       	breq	.+106    	; 0x79a <write_lcd_f+0xa4>
 730:	40 9a       	sbi	0x08, 0	; 8
 732:	41 98       	cbi	0x08, 1	; 8
 734:	41 98       	cbi	0x08, 1	; 8
 736:	41 9a       	sbi	0x08, 1	; 8
 738:	40 98       	cbi	0x08, 0	; 8
 73a:	41 98       	cbi	0x08, 1	; 8
 73c:	41 98       	cbi	0x08, 1	; 8
 73e:	41 9a       	sbi	0x08, 1	; 8
 740:	84 e0       	ldi	r24, 0x04	; 4
 742:	41 98       	cbi	0x08, 1	; 8
 744:	60 ff       	sbrs	r22, 0
 746:	27 c0       	rjmp	.+78     	; 0x796 <write_lcd_f+0xa0>
 748:	40 9a       	sbi	0x08, 0	; 8
 74a:	66 95       	lsr	r22
 74c:	41 98       	cbi	0x08, 1	; 8
 74e:	41 9a       	sbi	0x08, 1	; 8
 750:	81 50       	subi	r24, 0x01	; 1
 752:	b9 f7       	brne	.-18     	; 0x742 <write_lcd_f+0x4c>
 754:	40 98       	cbi	0x08, 0	; 8
 756:	84 e0       	ldi	r24, 0x04	; 4
 758:	41 98       	cbi	0x08, 1	; 8
 75a:	41 98       	cbi	0x08, 1	; 8
 75c:	41 9a       	sbi	0x08, 1	; 8
 75e:	81 50       	subi	r24, 0x01	; 1
 760:	d9 f7       	brne	.-10     	; 0x758 <write_lcd_f+0x62>
 762:	84 e0       	ldi	r24, 0x04	; 4
 764:	41 98       	cbi	0x08, 1	; 8
 766:	60 ff       	sbrs	r22, 0
 768:	14 c0       	rjmp	.+40     	; 0x792 <write_lcd_f+0x9c>
 76a:	40 9a       	sbi	0x08, 0	; 8
 76c:	66 95       	lsr	r22
 76e:	41 98       	cbi	0x08, 1	; 8
 770:	41 9a       	sbi	0x08, 1	; 8
 772:	81 50       	subi	r24, 0x01	; 1
 774:	b9 f7       	brne	.-18     	; 0x764 <write_lcd_f+0x6e>
 776:	40 98       	cbi	0x08, 0	; 8
 778:	84 e0       	ldi	r24, 0x04	; 4
 77a:	41 98       	cbi	0x08, 1	; 8
 77c:	41 98       	cbi	0x08, 1	; 8
 77e:	41 9a       	sbi	0x08, 1	; 8
 780:	81 50       	subi	r24, 0x01	; 1
 782:	d9 f7       	brne	.-10     	; 0x77a <write_lcd_f+0x84>
 784:	84 e1       	ldi	r24, 0x14	; 20
 786:	40 9a       	sbi	0x08, 0	; 8
 788:	81 50       	subi	r24, 0x01	; 1
 78a:	e9 f7       	brne	.-6      	; 0x786 <write_lcd_f+0x90>
 78c:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <write_RGB_LCD_activ>
 790:	08 95       	ret
 792:	40 98       	cbi	0x08, 0	; 8
 794:	eb cf       	rjmp	.-42     	; 0x76c <write_lcd_f+0x76>
 796:	40 98       	cbi	0x08, 0	; 8
 798:	d8 cf       	rjmp	.-80     	; 0x74a <write_lcd_f+0x54>
 79a:	40 98       	cbi	0x08, 0	; 8
 79c:	ca cf       	rjmp	.-108    	; 0x732 <write_lcd_f+0x3c>

0000079e <write_text_ram>:
* y_pos:   Zeile-Nummer (0..3)
* x_pos:   Spalte-Nummer (0..19) (Zeichenposition auf Zeile)
* str_ptr: Adresse des zu schreibenden Textes
\**********************************************************************************/
void write_text_ram(u8 y_pos, u8 x_pos, const char* str_ptr)
{	u8 str_p = 0;
 79e:	0f 93       	push	r16
 7a0:	1f 93       	push	r17
 7a2:	df 93       	push	r29
 7a4:	8a 01       	movw	r16, r20
	
	x_pos += y_pos * 0x20;																					// Position auf LCD berechnen 4x20 Zeichen
	write_lcd_f ('C',x_pos | 0x80);																	// LCD-Cursor auf gewünsschte Adresse setzen = Position auf LCD
 7a6:	90 e2       	ldi	r25, 0x20	; 32
 7a8:	89 9f       	mul	r24, r25
 7aa:	60 0d       	add	r22, r0
 7ac:	11 24       	eor	r1, r1
 7ae:	60 68       	ori	r22, 0x80	; 128
 7b0:	83 e4       	ldi	r24, 0x43	; 67
 7b2:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <write_lcd_f>
	while (str_ptr[str_p]) write_lcd_f ('D',str_ptr[str_p++]);			// Daten in obige Adresse schreiben
 7b6:	f8 01       	movw	r30, r16
 7b8:	60 81       	ld	r22, Z
 7ba:	66 23       	and	r22, r22
 7bc:	59 f0       	breq	.+22     	; 0x7d4 <write_text_ram+0x36>
 7be:	d0 e0       	ldi	r29, 0x00	; 0
 7c0:	df 5f       	subi	r29, 0xFF	; 255
 7c2:	84 e4       	ldi	r24, 0x44	; 68
 7c4:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <write_lcd_f>
 7c8:	f8 01       	movw	r30, r16
 7ca:	ed 0f       	add	r30, r29
 7cc:	f1 1d       	adc	r31, r1
 7ce:	60 81       	ld	r22, Z
 7d0:	61 11       	cpse	r22, r1
 7d2:	f6 cf       	rjmp	.-20     	; 0x7c0 <write_text_ram+0x22>
}
 7d4:	df 91       	pop	r29
 7d6:	1f 91       	pop	r17
 7d8:	0f 91       	pop	r16
 7da:	08 95       	ret

000007dc <write_zahl>:
*         2 = vor der zweitletzten Ziffer das Komma setzen (Zahl=Zahl/100)
*         3 = vor der drittletzten Ziffer das Komma setzen (Zahl=Zahl/1'000)
*         9 = vor der viertletzten Ziffer das Komma setzen (Zahl=Zahl/10'000)
\**********************************************************************************/
void write_zahl(u8 x_pos, u8 y_pos, u32 zahl_v, u8 s_vk, u8 s_nk, u8 komma)
{
 7dc:	2f 92       	push	r2
 7de:	3f 92       	push	r3
 7e0:	4f 92       	push	r4
 7e2:	5f 92       	push	r5
 7e4:	6f 92       	push	r6
 7e6:	7f 92       	push	r7
 7e8:	8f 92       	push	r8
 7ea:	9f 92       	push	r9
 7ec:	af 92       	push	r10
 7ee:	bf 92       	push	r11
 7f0:	cf 92       	push	r12
 7f2:	df 92       	push	r13
 7f4:	ef 92       	push	r14
 7f6:	ff 92       	push	r15
 7f8:	0f 93       	push	r16
 7fa:	1f 93       	push	r17
 7fc:	cf 93       	push	r28
 7fe:	df 93       	push	r29
 800:	cd b7       	in	r28, 0x3d	; 61
 802:	de b7       	in	r29, 0x3e	; 62
 804:	63 97       	sbiw	r28, 0x13	; 19
 806:	0f b6       	in	r0, 0x3f	; 63
 808:	f8 94       	cli
 80a:	de bf       	out	0x3e, r29	; 62
 80c:	0f be       	out	0x3f, r0	; 63
 80e:	cd bf       	out	0x3d, r28	; 61
 810:	8a 8b       	std	Y+18, r24	; 0x12
 812:	6b 8b       	std	Y+19, r22	; 0x13
 814:	29 01       	movw	r4, r18
 816:	3a 01       	movw	r6, r20
 818:	c8 8a       	std	Y+16, r12	; 0x10
	u8		i, pos, pos_t, nullen_loeschen = 1;

	//Umwandlung in die einzelnen Stellen-Zahlen 1er, 10er, 100er, ... 1'000'000'000er
	//zahl_v = 1234567890;

	if(s_vk >= 100) 
 81a:	04 36       	cpi	r16, 0x64	; 100
 81c:	08 f4       	brcc	.+2      	; 0x820 <write_zahl+0x44>
 81e:	bd c0       	rjmp	.+378    	; 0x99a <write_zahl+0x1be>
	{ s_vk -= 100;
 820:	04 56       	subi	r16, 0x64	; 100
		nullen_loeschen = 0;
 822:	19 8a       	std	Y+17, r1	; 0x11
 824:	0b 30       	cpi	r16, 0x0B	; 11
 826:	08 f0       	brcs	.+2      	; 0x82a <write_zahl+0x4e>
 828:	0a e0       	ldi	r16, 0x0A	; 10
 82a:	ef 86       	std	Y+15, r14	; 0x0f
 82c:	88 89       	ldd	r24, Y+16	; 0x10
 82e:	8e 15       	cp	r24, r14
 830:	08 f4       	brcc	.+2      	; 0x834 <write_zahl+0x58>
 832:	8f 87       	std	Y+15, r24	; 0x0f
	}
	if(s_vk > 10) s_vk = 10;
	
	if (s_nk > komma) s_nk = komma;									// unmöglicher Fall: mehr Nachkommastellen als Komma überhaupt geschoben werden 
	if (s_vk + s_nk > 10) s_nk = 10 - s_vk;					// unsinniger  Fall: zu viele Stellen
 834:	20 2e       	mov	r2, r16
 836:	31 2c       	mov	r3, r1
 838:	c1 01       	movw	r24, r2
 83a:	ef 85       	ldd	r30, Y+15	; 0x0f
 83c:	8e 0f       	add	r24, r30
 83e:	91 1d       	adc	r25, r1
 840:	0b 97       	sbiw	r24, 0x0b	; 11
 842:	1c f0       	brlt	.+6      	; 0x84a <write_zahl+0x6e>
 844:	8a e0       	ldi	r24, 0x0A	; 10
 846:	80 1b       	sub	r24, r16
 848:	8f 87       	std	Y+15, r24	; 0x0f
	
	zehner		= 10;
	send_buffer[11] = (zahl_v % 10) + 48;
 84a:	c3 01       	movw	r24, r6
 84c:	b2 01       	movw	r22, r4
 84e:	2a e0       	ldi	r18, 0x0A	; 10
 850:	30 e0       	ldi	r19, 0x00	; 0
 852:	40 e0       	ldi	r20, 0x00	; 0
 854:	50 e0       	ldi	r21, 0x00	; 0
 856:	0e 94 ac 05 	call	0xb58	; 0xb58 <__udivmodsi4>
 85a:	60 5d       	subi	r22, 0xD0	; 208
 85c:	6c 87       	std	Y+12, r22	; 0x0c
	i = 10;
 85e:	1a e0       	ldi	r17, 0x0A	; 10
	if(s_vk > 10) s_vk = 10;
	
	if (s_nk > komma) s_nk = komma;									// unmöglicher Fall: mehr Nachkommastellen als Komma überhaupt geschoben werden 
	if (s_vk + s_nk > 10) s_nk = 10 - s_vk;					// unsinniger  Fall: zu viele Stellen
	
	zehner		= 10;
 860:	3a e0       	ldi	r19, 0x0A	; 10
 862:	c3 2e       	mov	r12, r19
 864:	d1 2c       	mov	r13, r1
 866:	e1 2c       	mov	r14, r1
 868:	f1 2c       	mov	r15, r1
	send_buffer[11] = (zahl_v % 10) + 48;
	i = 10;
	do
	{ send_buffer[i] = ( (zahl_v / zehner) % 10) + 48;
 86a:	4a e0       	ldi	r20, 0x0A	; 10
 86c:	84 2e       	mov	r8, r20
 86e:	91 2c       	mov	r9, r1
 870:	a1 2c       	mov	r10, r1
 872:	b1 2c       	mov	r11, r1
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	8c 0f       	add	r24, r28
 87a:	9d 1f       	adc	r25, r29
 87c:	81 0f       	add	r24, r17
 87e:	91 1d       	adc	r25, r1
 880:	9e 87       	std	Y+14, r25	; 0x0e
 882:	8d 87       	std	Y+13, r24	; 0x0d
 884:	c3 01       	movw	r24, r6
 886:	b2 01       	movw	r22, r4
 888:	a7 01       	movw	r20, r14
 88a:	96 01       	movw	r18, r12
 88c:	0e 94 ac 05 	call	0xb58	; 0xb58 <__udivmodsi4>
 890:	ca 01       	movw	r24, r20
 892:	b9 01       	movw	r22, r18
 894:	a5 01       	movw	r20, r10
 896:	94 01       	movw	r18, r8
 898:	0e 94 ac 05 	call	0xb58	; 0xb58 <__udivmodsi4>
 89c:	60 5d       	subi	r22, 0xD0	; 208
 89e:	ed 85       	ldd	r30, Y+13	; 0x0d
 8a0:	fe 85       	ldd	r31, Y+14	; 0x0e
 8a2:	60 83       	st	Z, r22
		zehner *= 10;
 8a4:	cc 0c       	add	r12, r12
 8a6:	dd 1c       	adc	r13, r13
 8a8:	ee 1c       	adc	r14, r14
 8aa:	ff 1c       	adc	r15, r15
 8ac:	d7 01       	movw	r26, r14
 8ae:	c6 01       	movw	r24, r12
 8b0:	88 0f       	add	r24, r24
 8b2:	99 1f       	adc	r25, r25
 8b4:	aa 1f       	adc	r26, r26
 8b6:	bb 1f       	adc	r27, r27
 8b8:	88 0f       	add	r24, r24
 8ba:	99 1f       	adc	r25, r25
 8bc:	aa 1f       	adc	r26, r26
 8be:	bb 1f       	adc	r27, r27
 8c0:	c8 0e       	add	r12, r24
 8c2:	d9 1e       	adc	r13, r25
 8c4:	ea 1e       	adc	r14, r26
 8c6:	fb 1e       	adc	r15, r27
	} while(i--);
 8c8:	11 50       	subi	r17, 0x01	; 1
 8ca:	a0 f6       	brcc	.-88     	; 0x874 <write_zahl+0x98>
 8cc:	2c e0       	ldi	r18, 0x0C	; 12
 8ce:	f8 89       	ldd	r31, Y+16	; 0x10
 8d0:	2f 1b       	sub	r18, r31

	//Vor-Kommastellen kopieren
	pos = 0;
	pos_t = 12-komma-s_vk;
 8d2:	82 2f       	mov	r24, r18
 8d4:	80 1b       	sub	r24, r16
	//if(s_vk == 0) pos_t
	for (i = 0; i < s_vk; i++)
 8d6:	00 23       	and	r16, r16
 8d8:	09 f4       	brne	.+2      	; 0x8dc <write_zahl+0x100>
 8da:	85 c0       	rjmp	.+266    	; 0x9e6 <write_zahl+0x20a>
 8dc:	fe 01       	movw	r30, r28
 8de:	31 96       	adiw	r30, 0x01	; 1
	{ send_buffer[pos++] = send_buffer[pos_t++];
 8e0:	a1 e0       	ldi	r26, 0x01	; 1
 8e2:	b0 e0       	ldi	r27, 0x00	; 0
 8e4:	ac 0f       	add	r26, r28
 8e6:	bd 1f       	adc	r27, r29
 8e8:	a8 0f       	add	r26, r24
 8ea:	b1 1d       	adc	r27, r1
 8ec:	9c 91       	ld	r25, X
 8ee:	91 93       	st	Z+, r25
 8f0:	8f 5f       	subi	r24, 0xFF	; 255

	//Vor-Kommastellen kopieren
	pos = 0;
	pos_t = 12-komma-s_vk;
	//if(s_vk == 0) pos_t
	for (i = 0; i < s_vk; i++)
 8f2:	28 13       	cpse	r18, r24
 8f4:	f5 cf       	rjmp	.-22     	; 0x8e0 <write_zahl+0x104>
	{ send_buffer[pos++] = send_buffer[pos_t++];
	}
	if (s_nk > 0)
 8f6:	8f 85       	ldd	r24, Y+15	; 0x0f
 8f8:	81 11       	cpse	r24, r1
 8fa:	52 c0       	rjmp	.+164    	; 0x9a0 <write_zahl+0x1c4>
 8fc:	f1 01       	movw	r30, r2

		//Nach-Kommastellen kopieren
		pos_t = 12-komma;
		for (i = 0; i < s_nk; i++) send_buffer[pos++] = send_buffer[pos_t++];
	}
	send_buffer[pos] = 0;    //Endmarke des Strings setzen
 8fe:	81 e0       	ldi	r24, 0x01	; 1
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	8c 0f       	add	r24, r28
 904:	9d 1f       	adc	r25, r29
 906:	e8 0f       	add	r30, r24
 908:	f9 1f       	adc	r31, r25
 90a:	10 82       	st	Z, r1

	if(nullen_loeschen)
 90c:	99 89       	ldd	r25, Y+17	; 0x11
 90e:	99 23       	and	r25, r25
 910:	21 f1       	breq	.+72     	; 0x95a <write_zahl+0x17e>
	{ //Vorangehende Nullen löschen		(xyz)
	  i = 0;
	  while ((send_buffer[i] == 48) && (i < s_vk-1)) send_buffer[i++] = 32;
 912:	89 81       	ldd	r24, Y+1	; 0x01
 914:	80 33       	cpi	r24, 0x30	; 48
 916:	09 f5       	brne	.+66     	; 0x95a <write_zahl+0x17e>
 918:	a1 01       	movw	r20, r2
 91a:	41 50       	subi	r20, 0x01	; 1
 91c:	51 09       	sbc	r21, r1
 91e:	14 16       	cp	r1, r20
 920:	15 06       	cpc	r1, r21
 922:	dc f4       	brge	.+54     	; 0x95a <write_zahl+0x17e>
 924:	80 e0       	ldi	r24, 0x00	; 0
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	20 e0       	ldi	r18, 0x00	; 0
 92a:	60 e2       	ldi	r22, 0x20	; 32
 92c:	03 c0       	rjmp	.+6      	; 0x934 <write_zahl+0x158>
 92e:	84 17       	cp	r24, r20
 930:	95 07       	cpc	r25, r21
 932:	9c f4       	brge	.+38     	; 0x95a <write_zahl+0x17e>
 934:	2f 5f       	subi	r18, 0xFF	; 255
 936:	e1 e0       	ldi	r30, 0x01	; 1
 938:	f0 e0       	ldi	r31, 0x00	; 0
 93a:	ec 0f       	add	r30, r28
 93c:	fd 1f       	adc	r31, r29
 93e:	e8 0f       	add	r30, r24
 940:	f9 1f       	adc	r31, r25
 942:	60 83       	st	Z, r22
 944:	82 2f       	mov	r24, r18
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	e1 e0       	ldi	r30, 0x01	; 1
 94a:	f0 e0       	ldi	r31, 0x00	; 0
 94c:	ec 0f       	add	r30, r28
 94e:	fd 1f       	adc	r31, r29
 950:	e8 0f       	add	r30, r24
 952:	f9 1f       	adc	r31, r25
 954:	30 81       	ld	r19, Z
 956:	30 33       	cpi	r19, 0x30	; 48
 958:	51 f3       	breq	.-44     	; 0x92e <write_zahl+0x152>
	}
	
	write_text_ram(x_pos, y_pos, send_buffer);
 95a:	ae 01       	movw	r20, r28
 95c:	4f 5f       	subi	r20, 0xFF	; 255
 95e:	5f 4f       	sbci	r21, 0xFF	; 255
 960:	6b 89       	ldd	r22, Y+19	; 0x13
 962:	8a 89       	ldd	r24, Y+18	; 0x12
 964:	0e 94 cf 03 	call	0x79e	; 0x79e <write_text_ram>
}
 968:	63 96       	adiw	r28, 0x13	; 19
 96a:	0f b6       	in	r0, 0x3f	; 63
 96c:	f8 94       	cli
 96e:	de bf       	out	0x3e, r29	; 62
 970:	0f be       	out	0x3f, r0	; 63
 972:	cd bf       	out	0x3d, r28	; 61
 974:	df 91       	pop	r29
 976:	cf 91       	pop	r28
 978:	1f 91       	pop	r17
 97a:	0f 91       	pop	r16
 97c:	ff 90       	pop	r15
 97e:	ef 90       	pop	r14
 980:	df 90       	pop	r13
 982:	cf 90       	pop	r12
 984:	bf 90       	pop	r11
 986:	af 90       	pop	r10
 988:	9f 90       	pop	r9
 98a:	8f 90       	pop	r8
 98c:	7f 90       	pop	r7
 98e:	6f 90       	pop	r6
 990:	5f 90       	pop	r5
 992:	4f 90       	pop	r4
 994:	3f 90       	pop	r3
 996:	2f 90       	pop	r2
 998:	08 95       	ret
\**********************************************************************************/
void write_zahl(u8 x_pos, u8 y_pos, u32 zahl_v, u8 s_vk, u8 s_nk, u8 komma)
{
	u32		zehner;
	char	send_buffer[12];
	u8		i, pos, pos_t, nullen_loeschen = 1;
 99a:	21 e0       	ldi	r18, 0x01	; 1
 99c:	29 8b       	std	Y+17, r18	; 0x11
 99e:	42 cf       	rjmp	.-380    	; 0x824 <write_zahl+0x48>
	//if(s_vk == 0) pos_t
	for (i = 0; i < s_vk; i++)
	{ send_buffer[pos++] = send_buffer[pos_t++];
	}
	if (s_nk > 0)
	{ send_buffer[pos++] = '.';
 9a0:	0f 5f       	subi	r16, 0xFF	; 255
 9a2:	8e e2       	ldi	r24, 0x2E	; 46
 9a4:	e1 e0       	ldi	r30, 0x01	; 1
 9a6:	f0 e0       	ldi	r31, 0x00	; 0
 9a8:	ec 0f       	add	r30, r28
 9aa:	fd 1f       	adc	r31, r29
 9ac:	e2 0d       	add	r30, r2
 9ae:	f3 1d       	adc	r31, r3
 9b0:	80 83       	st	Z, r24
 9b2:	e0 2f       	mov	r30, r16
 9b4:	20 1b       	sub	r18, r16

		//Nach-Kommastellen kopieren
		pos_t = 12-komma;
		for (i = 0; i < s_nk; i++) send_buffer[pos++] = send_buffer[pos_t++];
 9b6:	82 2f       	mov	r24, r18
 9b8:	8e 0f       	add	r24, r30
 9ba:	a1 e0       	ldi	r26, 0x01	; 1
 9bc:	b0 e0       	ldi	r27, 0x00	; 0
 9be:	ac 0f       	add	r26, r28
 9c0:	bd 1f       	adc	r27, r29
 9c2:	a8 0f       	add	r26, r24
 9c4:	b1 1d       	adc	r27, r1
 9c6:	8c 91       	ld	r24, X
 9c8:	a1 e0       	ldi	r26, 0x01	; 1
 9ca:	b0 e0       	ldi	r27, 0x00	; 0
 9cc:	ac 0f       	add	r26, r28
 9ce:	bd 1f       	adc	r27, r29
 9d0:	ae 0f       	add	r26, r30
 9d2:	b1 1d       	adc	r27, r1
 9d4:	8c 93       	st	X, r24
 9d6:	ef 5f       	subi	r30, 0xFF	; 255
 9d8:	8e 2f       	mov	r24, r30
 9da:	80 1b       	sub	r24, r16
 9dc:	9f 85       	ldd	r25, Y+15	; 0x0f
 9de:	89 17       	cp	r24, r25
 9e0:	50 f3       	brcs	.-44     	; 0x9b6 <write_zahl+0x1da>
 9e2:	f0 e0       	ldi	r31, 0x00	; 0
 9e4:	8c cf       	rjmp	.-232    	; 0x8fe <write_zahl+0x122>
	pos_t = 12-komma-s_vk;
	//if(s_vk == 0) pos_t
	for (i = 0; i < s_vk; i++)
	{ send_buffer[pos++] = send_buffer[pos_t++];
	}
	if (s_nk > 0)
 9e6:	ef 85       	ldd	r30, Y+15	; 0x0f
 9e8:	ee 23       	and	r30, r30
 9ea:	21 f0       	breq	.+8      	; 0x9f4 <write_zahl+0x218>
	{ send_buffer[pos++] = '.';
 9ec:	8e e2       	ldi	r24, 0x2E	; 46
 9ee:	89 83       	std	Y+1, r24	; 0x01
 9f0:	01 e0       	ldi	r16, 0x01	; 1
 9f2:	df cf       	rjmp	.-66     	; 0x9b2 <write_zahl+0x1d6>
	pos_t = 12-komma-s_vk;
	//if(s_vk == 0) pos_t
	for (i = 0; i < s_vk; i++)
	{ send_buffer[pos++] = send_buffer[pos_t++];
	}
	if (s_nk > 0)
 9f4:	e0 e0       	ldi	r30, 0x00	; 0
 9f6:	f0 e0       	ldi	r31, 0x00	; 0
 9f8:	82 cf       	rjmp	.-252    	; 0x8fe <write_zahl+0x122>

000009fa <lcd_init>:
*
* Initialisierung des integrierten LCD-Displays
\**********************************************************************************/

void lcd_init(void)
{	u8 i;
 9fa:	df 93       	push	r29
	
	DDRC |= 0x01;													// Port PC0 auf Output setzen LCD-Outputs SOD
 9fc:	38 9a       	sbi	0x07, 0	; 7
	DDRC |= 0x02;													// Port PC1 auf Output setzen LCD-Outputs SCLK
 9fe:	39 9a       	sbi	0x07, 1	; 7
 a00:	d2 e3       	ldi	r29, 0x32	; 50

	for(i=0; i<50; i++) delay_nop(120);   // 10ms (50x 0.2us) warten, bis LCD gestartet ist (Power-Up)
 a02:	88 e7       	ldi	r24, 0x78	; 120
 a04:	0e 94 65 03 	call	0x6ca	; 0x6ca <delay_nop>
 a08:	d1 50       	subi	r29, 0x01	; 1
 a0a:	d9 f7       	brne	.-10     	; 0xa02 <lcd_init+0x8>
	
	write_lcd_f('C',0x34);								// set 8-Bit-Interface RE = 1
 a0c:	64 e3       	ldi	r22, 0x34	; 52
 a0e:	83 e4       	ldi	r24, 0x43	; 67
 a10:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <write_lcd_f>
	write_lcd_f('C',0x34);								// Nochmals, denn einige LCD starten sonst nicht korrekt.
 a14:	64 e3       	ldi	r22, 0x34	; 52
 a16:	83 e4       	ldi	r24, 0x43	; 67
 a18:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <write_lcd_f>
	write_lcd_f('C',0x09);								// 4-Zeilen-Modus, 5-Dot Font-Breite
 a1c:	69 e0       	ldi	r22, 0x09	; 9
 a1e:	83 e4       	ldi	r24, 0x43	; 67
 a20:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <write_lcd_f>
	write_lcd_f('C',0x30);								// set 8-Bit-Interface RE = 0
 a24:	60 e3       	ldi	r22, 0x30	; 48
 a26:	83 e4       	ldi	r24, 0x43	; 67
 a28:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <write_lcd_f>
	write_lcd_f('C',0x0C);								// Display ON, Cursor OFF
 a2c:	6c e0       	ldi	r22, 0x0C	; 12
 a2e:	83 e4       	ldi	r24, 0x43	; 67
 a30:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <write_lcd_f>
	write_lcd_f('C',0x01);								// Clear Display
 a34:	61 e0       	ldi	r22, 0x01	; 1
 a36:	83 e4       	ldi	r24, 0x43	; 67
 a38:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <write_lcd_f>
 a3c:	d8 e0       	ldi	r29, 0x08	; 8
	for(i=0; i<8; i++) delay_nop(120);		// 1.6ms (8x 0.2us) warten, bis LCD gelöscht ist 
 a3e:	88 e7       	ldi	r24, 0x78	; 120
 a40:	0e 94 65 03 	call	0x6ca	; 0x6ca <delay_nop>
 a44:	d1 50       	subi	r29, 0x01	; 1
 a46:	d9 f7       	brne	.-10     	; 0xa3e <lcd_init+0x44>
	
	write_lcd_f('C',0x07);								// Entry Mode
 a48:	67 e0       	ldi	r22, 0x07	; 7
 a4a:	83 e4       	ldi	r24, 0x43	; 67
 a4c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <write_lcd_f>
	init_Timer0_1ms_int(); //Timer0 initialisierung 1ms interrupt
}
 a50:	df 91       	pop	r29
	write_lcd_f('C',0x0C);								// Display ON, Cursor OFF
	write_lcd_f('C',0x01);								// Clear Display
	for(i=0; i<8; i++) delay_nop(120);		// 1.6ms (8x 0.2us) warten, bis LCD gelöscht ist 
	
	write_lcd_f('C',0x07);								// Entry Mode
	init_Timer0_1ms_int(); //Timer0 initialisierung 1ms interrupt
 a52:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <init_Timer0_1ms_int>

00000a56 <clear_lcd>:
*
* Löscht die Anzeige auf dem LCD-Display
\**********************************************************************************/

void clear_lcd(void)
{ u8 i;
 a56:	df 93       	push	r29
	write_lcd_f('C',0x01);      //Clear Display
 a58:	61 e0       	ldi	r22, 0x01	; 1
 a5a:	83 e4       	ldi	r24, 0x43	; 67
 a5c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <write_lcd_f>
 a60:	d8 e0       	ldi	r29, 0x08	; 8
	for(i=0; i<8; i++) delay_nop(120);		// 1.6ms (8x 0.2us) warten, bis LCD gelöscht ist 
 a62:	88 e7       	ldi	r24, 0x78	; 120
 a64:	0e 94 65 03 	call	0x6ca	; 0x6ca <delay_nop>
 a68:	d1 50       	subi	r29, 0x01	; 1
 a6a:	d9 f7       	brne	.-10     	; 0xa62 <clear_lcd+0xc>
}
 a6c:	df 91       	pop	r29
 a6e:	08 95       	ret

00000a70 <LED_Show>:
													// Definition mit "PROGMEM", Lesen mit "pgm_read_byte, pgm_read_ptr"
																		
#pragma GCC optimize 0								// Optimierung ausschalten, damit das Debugging möglich ist

void LED_Show(void)
{
 a70:	cf 93       	push	r28
 a72:	df 93       	push	r29
 a74:	1f 92       	push	r1
 a76:	cd b7       	in	r28, 0x3d	; 61
 a78:	de b7       	in	r29, 0x3e	; 62
	u8 i;
	
	PORTB=0x01;
 a7a:	85 e2       	ldi	r24, 0x25	; 37
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	21 e0       	ldi	r18, 0x01	; 1
 a80:	fc 01       	movw	r30, r24
 a82:	20 83       	st	Z, r18
	for(i=0;i<8;i++)
 a84:	19 82       	std	Y+1, r1	; 0x01
 a86:	17 c0       	rjmp	.+46     	; 0xab6 <LED_Show+0x46>
	{
		wait_1ms(50);
 a88:	62 e3       	ldi	r22, 0x32	; 50
 a8a:	70 e0       	ldi	r23, 0x00	; 0
 a8c:	80 e0       	ldi	r24, 0x00	; 0
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	0e 94 25 03 	call	0x64a	; 0x64a <wait_1ms>
		PORTB=0x01<<i;
 a94:	85 e2       	ldi	r24, 0x25	; 37
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	29 81       	ldd	r18, Y+1	; 0x01
 a9a:	42 2f       	mov	r20, r18
 a9c:	50 e0       	ldi	r21, 0x00	; 0
 a9e:	21 e0       	ldi	r18, 0x01	; 1
 aa0:	30 e0       	ldi	r19, 0x00	; 0
 aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <LED_Show+0x38>
 aa4:	22 0f       	add	r18, r18
 aa6:	33 1f       	adc	r19, r19
 aa8:	4a 95       	dec	r20
 aaa:	e2 f7       	brpl	.-8      	; 0xaa4 <LED_Show+0x34>
 aac:	fc 01       	movw	r30, r24
 aae:	20 83       	st	Z, r18
void LED_Show(void)
{
	u8 i;
	
	PORTB=0x01;
	for(i=0;i<8;i++)
 ab0:	89 81       	ldd	r24, Y+1	; 0x01
 ab2:	8f 5f       	subi	r24, 0xFF	; 255
 ab4:	89 83       	std	Y+1, r24	; 0x01
 ab6:	89 81       	ldd	r24, Y+1	; 0x01
 ab8:	88 30       	cpi	r24, 0x08	; 8
 aba:	30 f3       	brcs	.-52     	; 0xa88 <LED_Show+0x18>
	{
		wait_1ms(50);
		PORTB=0x01<<i;
	}
	PORTB=0x80;
 abc:	85 e2       	ldi	r24, 0x25	; 37
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	20 e8       	ldi	r18, 0x80	; 128
 ac2:	fc 01       	movw	r30, r24
 ac4:	20 83       	st	Z, r18
	for(i=0;i<8;i++)
 ac6:	19 82       	std	Y+1, r1	; 0x01
 ac8:	17 c0       	rjmp	.+46     	; 0xaf8 <LED_Show+0x88>
	{
		wait_1ms(50);
 aca:	62 e3       	ldi	r22, 0x32	; 50
 acc:	70 e0       	ldi	r23, 0x00	; 0
 ace:	80 e0       	ldi	r24, 0x00	; 0
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	0e 94 25 03 	call	0x64a	; 0x64a <wait_1ms>
		PORTB=0x80>>i;
 ad6:	85 e2       	ldi	r24, 0x25	; 37
 ad8:	90 e0       	ldi	r25, 0x00	; 0
 ada:	29 81       	ldd	r18, Y+1	; 0x01
 adc:	42 2f       	mov	r20, r18
 ade:	50 e0       	ldi	r21, 0x00	; 0
 ae0:	20 e8       	ldi	r18, 0x80	; 128
 ae2:	30 e0       	ldi	r19, 0x00	; 0
 ae4:	02 c0       	rjmp	.+4      	; 0xaea <LED_Show+0x7a>
 ae6:	35 95       	asr	r19
 ae8:	27 95       	ror	r18
 aea:	4a 95       	dec	r20
 aec:	e2 f7       	brpl	.-8      	; 0xae6 <LED_Show+0x76>
 aee:	fc 01       	movw	r30, r24
 af0:	20 83       	st	Z, r18
	{
		wait_1ms(50);
		PORTB=0x01<<i;
	}
	PORTB=0x80;
	for(i=0;i<8;i++)
 af2:	89 81       	ldd	r24, Y+1	; 0x01
 af4:	8f 5f       	subi	r24, 0xFF	; 255
 af6:	89 83       	std	Y+1, r24	; 0x01
 af8:	89 81       	ldd	r24, Y+1	; 0x01
 afa:	88 30       	cpi	r24, 0x08	; 8
 afc:	30 f3       	brcs	.-52     	; 0xaca <LED_Show+0x5a>
	{
		wait_1ms(50);
		PORTB=0x80>>i;
	}
	wait_1ms(100);
 afe:	64 e6       	ldi	r22, 0x64	; 100
 b00:	70 e0       	ldi	r23, 0x00	; 0
 b02:	80 e0       	ldi	r24, 0x00	; 0
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	0e 94 25 03 	call	0x64a	; 0x64a <wait_1ms>
	PORTB=0x00;	
 b0a:	85 e2       	ldi	r24, 0x25	; 37
 b0c:	90 e0       	ldi	r25, 0x00	; 0
 b0e:	fc 01       	movw	r30, r24
 b10:	10 82       	st	Z, r1
}
 b12:	00 00       	nop
 b14:	0f 90       	pop	r0
 b16:	df 91       	pop	r29
 b18:	cf 91       	pop	r28
 b1a:	08 95       	ret

00000b1c <init_BT_CAR_V2_0>:

void init_BT_CAR_V2_0(void)
{
 b1c:	cf 93       	push	r28
 b1e:	df 93       	push	r29
 b20:	cd b7       	in	r28, 0x3d	; 61
 b22:	de b7       	in	r29, 0x3e	; 62
	// Initialisierung PortA
	DDRA  = 0x60;			// Eingang PA0..PA4 as Input (analog Signals), PA5 and PA6 as Output and PA7 as Input (SRG Ansteuerung)
 b24:	81 e2       	ldi	r24, 0x21	; 33
 b26:	90 e0       	ldi	r25, 0x00	; 0
 b28:	20 e6       	ldi	r18, 0x60	; 96
 b2a:	fc 01       	movw	r30, r24
 b2c:	20 83       	st	Z, r18

	//Initialisierung Port B
	DDRB  =  0xFF;			// LED Port, alles Outputs, ACHTUNG PB.0...PB.3 sind auch Taster am LCD Display
 b2e:	84 e2       	ldi	r24, 0x24	; 36
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	2f ef       	ldi	r18, 0xFF	; 255
 b34:	fc 01       	movw	r30, r24
 b36:	20 83       	st	Z, r18
	//PC0, PC1 im LCD Driver definiert
	//PC2...PC5 für JTAG Schnittstelle
	//PC6, PC7 32.678 KHz Quarz 

	//Initialisierung PortD
	DDRD  =  0xFC;			// PD7,PD6,PD5,PD4 als Outputs (PWM), PD3 Output (Enable HB), PD2 Output (Summer)
 b38:	8a e2       	ldi	r24, 0x2A	; 42
 b3a:	90 e0       	ldi	r25, 0x00	; 0
 b3c:	2c ef       	ldi	r18, 0xFC	; 252
 b3e:	fc 01       	movw	r30, r24
 b40:	20 83       	st	Z, r18
							// PD1 und PD0 sind TxD und RxD von UART0 werden über RXEN und TXEN aktiviert
							
	sei(); 					// Global Interrupts aktivieren	
 b42:	78 94       	sei
	lcd_init();				// Das LCD muss ebenfalls initialisiert werden, um später genutz werden zu können
 b44:	0e 94 fd 04 	call	0x9fa	; 0x9fa <lcd_init>
	clear_lcd();
 b48:	0e 94 2b 05 	call	0xa56	; 0xa56 <clear_lcd>
	//write_text(0, 0,PSTR("LCD init ok"));
	LED_Show();							
 b4c:	0e 94 38 05 	call	0xa70	; 0xa70 <LED_Show>
}
 b50:	00 00       	nop
 b52:	df 91       	pop	r29
 b54:	cf 91       	pop	r28
 b56:	08 95       	ret

00000b58 <__udivmodsi4>:
 b58:	a1 e2       	ldi	r26, 0x21	; 33
 b5a:	1a 2e       	mov	r1, r26
 b5c:	aa 1b       	sub	r26, r26
 b5e:	bb 1b       	sub	r27, r27
 b60:	fd 01       	movw	r30, r26
 b62:	0d c0       	rjmp	.+26     	; 0xb7e <__udivmodsi4_ep>

00000b64 <__udivmodsi4_loop>:
 b64:	aa 1f       	adc	r26, r26
 b66:	bb 1f       	adc	r27, r27
 b68:	ee 1f       	adc	r30, r30
 b6a:	ff 1f       	adc	r31, r31
 b6c:	a2 17       	cp	r26, r18
 b6e:	b3 07       	cpc	r27, r19
 b70:	e4 07       	cpc	r30, r20
 b72:	f5 07       	cpc	r31, r21
 b74:	20 f0       	brcs	.+8      	; 0xb7e <__udivmodsi4_ep>
 b76:	a2 1b       	sub	r26, r18
 b78:	b3 0b       	sbc	r27, r19
 b7a:	e4 0b       	sbc	r30, r20
 b7c:	f5 0b       	sbc	r31, r21

00000b7e <__udivmodsi4_ep>:
 b7e:	66 1f       	adc	r22, r22
 b80:	77 1f       	adc	r23, r23
 b82:	88 1f       	adc	r24, r24
 b84:	99 1f       	adc	r25, r25
 b86:	1a 94       	dec	r1
 b88:	69 f7       	brne	.-38     	; 0xb64 <__udivmodsi4_loop>
 b8a:	60 95       	com	r22
 b8c:	70 95       	com	r23
 b8e:	80 95       	com	r24
 b90:	90 95       	com	r25
 b92:	9b 01       	movw	r18, r22
 b94:	ac 01       	movw	r20, r24
 b96:	bd 01       	movw	r22, r26
 b98:	cf 01       	movw	r24, r30
 b9a:	08 95       	ret

00000b9c <strtok>:
 b9c:	42 e4       	ldi	r20, 0x42	; 66
 b9e:	51 e0       	ldi	r21, 0x01	; 1
 ba0:	0e 94 d3 05 	call	0xba6	; 0xba6 <strtok_r>
 ba4:	08 95       	ret

00000ba6 <strtok_r>:
 ba6:	fa 01       	movw	r30, r20
 ba8:	a1 91       	ld	r26, Z+
 baa:	b0 81       	ld	r27, Z
 bac:	00 97       	sbiw	r24, 0x00	; 0
 bae:	19 f4       	brne	.+6      	; 0xbb6 <strtok_r+0x10>
 bb0:	10 97       	sbiw	r26, 0x00	; 0
 bb2:	e1 f0       	breq	.+56     	; 0xbec <strtok_r+0x46>
 bb4:	cd 01       	movw	r24, r26
 bb6:	dc 01       	movw	r26, r24
 bb8:	cd 01       	movw	r24, r26
 bba:	0d 90       	ld	r0, X+
 bbc:	00 20       	and	r0, r0
 bbe:	11 f4       	brne	.+4      	; 0xbc4 <strtok_r+0x1e>
 bc0:	c0 01       	movw	r24, r0
 bc2:	13 c0       	rjmp	.+38     	; 0xbea <strtok_r+0x44>
 bc4:	fb 01       	movw	r30, r22
 bc6:	21 91       	ld	r18, Z+
 bc8:	22 23       	and	r18, r18
 bca:	19 f0       	breq	.+6      	; 0xbd2 <strtok_r+0x2c>
 bcc:	20 15       	cp	r18, r0
 bce:	d9 f7       	brne	.-10     	; 0xbc6 <strtok_r+0x20>
 bd0:	f3 cf       	rjmp	.-26     	; 0xbb8 <strtok_r+0x12>
 bd2:	fb 01       	movw	r30, r22
 bd4:	21 91       	ld	r18, Z+
 bd6:	20 15       	cp	r18, r0
 bd8:	19 f4       	brne	.+6      	; 0xbe0 <strtok_r+0x3a>
 bda:	1e 92       	st	-X, r1
 bdc:	11 96       	adiw	r26, 0x01	; 1
 bde:	06 c0       	rjmp	.+12     	; 0xbec <strtok_r+0x46>
 be0:	22 23       	and	r18, r18
 be2:	c1 f7       	brne	.-16     	; 0xbd4 <strtok_r+0x2e>
 be4:	0d 90       	ld	r0, X+
 be6:	00 20       	and	r0, r0
 be8:	a1 f7       	brne	.-24     	; 0xbd2 <strtok_r+0x2c>
 bea:	d0 01       	movw	r26, r0
 bec:	fa 01       	movw	r30, r20
 bee:	a1 93       	st	Z+, r26
 bf0:	b0 83       	st	Z, r27
 bf2:	08 95       	ret

00000bf4 <_exit>:
 bf4:	f8 94       	cli

00000bf6 <__stop_program>:
 bf6:	ff cf       	rjmp	.-2      	; 0xbf6 <__stop_program>
